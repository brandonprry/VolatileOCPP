/* 
 * MaEVe CSMS
 *
 * Internal API to interact with the MaEVe CSMS, external clients should use OCPI.
 *
 * OpenAPI spec version: 0.0.0
 * Contact: maeve-team@thoughtworks.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        /// <summary>
        /// Test DeleteCertificate
        /// </summary>
        [Test]
        public void DeleteCertificateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string certificateHash = null;
            //instance.DeleteCertificate(certificateHash);
            
        }
        /// <summary>
        /// Test InstallChargeStationCertificates
        /// </summary>
        [Test]
        public void InstallChargeStationCertificatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ChargeStationInstallCertificates body = null;
            //string csId = null;
            //instance.InstallChargeStationCertificates(body, csId);
            
        }
        /// <summary>
        /// Test ListTokens
        /// </summary>
        [Test]
        public void ListTokensTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.ListTokens(offset, limit);
            //Assert.IsInstanceOf<List<Token>> (response, "response is List<Token>");
        }
        /// <summary>
        /// Test LookupCertificate
        /// </summary>
        [Test]
        public void LookupCertificateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string certificateHash = null;
            //var response = instance.LookupCertificate(certificateHash);
            //Assert.IsInstanceOf<Certificate> (response, "response is Certificate");
        }
        /// <summary>
        /// Test LookupChargeStationAuth
        /// </summary>
        [Test]
        public void LookupChargeStationAuthTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string csId = null;
            //var response = instance.LookupChargeStationAuth(csId);
            //Assert.IsInstanceOf<ChargeStationAuth> (response, "response is ChargeStationAuth");
        }
        /// <summary>
        /// Test LookupToken
        /// </summary>
        [Test]
        public void LookupTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tokenUid = null;
            //var response = instance.LookupToken(tokenUid);
            //Assert.IsInstanceOf<Token> (response, "response is Token");
        }
        /// <summary>
        /// Test ReconfigureChargeStation
        /// </summary>
        [Test]
        public void ReconfigureChargeStationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Dictionary<string, string> body = null;
            //string csId = null;
            //instance.ReconfigureChargeStation(body, csId);
            
        }
        /// <summary>
        /// Test RegisterChargeStation
        /// </summary>
        [Test]
        public void RegisterChargeStationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ChargeStationAuth body = null;
            //string csId = null;
            //instance.RegisterChargeStation(body, csId);
            
        }
        /// <summary>
        /// Test RegisterLocation
        /// </summary>
        [Test]
        public void RegisterLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Location body = null;
            //string locationId = null;
            //instance.RegisterLocation(body, locationId);
            
        }
        /// <summary>
        /// Test RegisterParty
        /// </summary>
        [Test]
        public void RegisterPartyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Registration body = null;
            //instance.RegisterParty(body);
            
        }
        /// <summary>
        /// Test SetToken
        /// </summary>
        [Test]
        public void SetTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Token body = null;
            //instance.SetToken(body);
            
        }
        /// <summary>
        /// Test TriggerChargeStation
        /// </summary>
        [Test]
        public void TriggerChargeStationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ChargeStationTrigger body = null;
            //string csId = null;
            //instance.TriggerChargeStation(body, csId);
            
        }
        /// <summary>
        /// Test UploadCertificate
        /// </summary>
        [Test]
        public void UploadCertificateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Certificate body = null;
            //instance.UploadCertificate(body);
            
        }
    }

}

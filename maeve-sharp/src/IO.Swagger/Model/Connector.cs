/* 
 * MaEVe CSMS
 *
 * Internal API to interact with the MaEVe CSMS, external clients should use OCPI.
 *
 * OpenAPI spec version: 0.0.0
 * Contact: maeve-team@thoughtworks.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Connector
    /// </summary>
    [DataContract]
        public partial class Connector :  IEquatable<Connector>, IValidatableObject
    {
        /// <summary>
        /// Defines Standard
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StandardEnum
        {
            /// <summary>
            /// Enum CHADEMO for value: CHADEMO
            /// </summary>
            [EnumMember(Value = "CHADEMO")]
            CHADEMO = 1,
            /// <summary>
            /// Enum CHAOJI for value: CHAOJI
            /// </summary>
            [EnumMember(Value = "CHAOJI")]
            CHAOJI = 2,
            /// <summary>
            /// Enum DOMESTICA for value: DOMESTIC_A
            /// </summary>
            [EnumMember(Value = "DOMESTIC_A")]
            DOMESTICA = 3,
            /// <summary>
            /// Enum DOMESTICB for value: DOMESTIC_B
            /// </summary>
            [EnumMember(Value = "DOMESTIC_B")]
            DOMESTICB = 4,
            /// <summary>
            /// Enum DOMESTICC for value: DOMESTIC_C
            /// </summary>
            [EnumMember(Value = "DOMESTIC_C")]
            DOMESTICC = 5,
            /// <summary>
            /// Enum DOMESTICD for value: DOMESTIC_D
            /// </summary>
            [EnumMember(Value = "DOMESTIC_D")]
            DOMESTICD = 6,
            /// <summary>
            /// Enum DOMESTICE for value: DOMESTIC_E
            /// </summary>
            [EnumMember(Value = "DOMESTIC_E")]
            DOMESTICE = 7,
            /// <summary>
            /// Enum DOMESTICF for value: DOMESTIC_F
            /// </summary>
            [EnumMember(Value = "DOMESTIC_F")]
            DOMESTICF = 8,
            /// <summary>
            /// Enum DOMESTICG for value: DOMESTIC_G
            /// </summary>
            [EnumMember(Value = "DOMESTIC_G")]
            DOMESTICG = 9,
            /// <summary>
            /// Enum DOMESTICH for value: DOMESTIC_H
            /// </summary>
            [EnumMember(Value = "DOMESTIC_H")]
            DOMESTICH = 10,
            /// <summary>
            /// Enum DOMESTICI for value: DOMESTIC_I
            /// </summary>
            [EnumMember(Value = "DOMESTIC_I")]
            DOMESTICI = 11,
            /// <summary>
            /// Enum DOMESTICJ for value: DOMESTIC_J
            /// </summary>
            [EnumMember(Value = "DOMESTIC_J")]
            DOMESTICJ = 12,
            /// <summary>
            /// Enum DOMESTICK for value: DOMESTIC_K
            /// </summary>
            [EnumMember(Value = "DOMESTIC_K")]
            DOMESTICK = 13,
            /// <summary>
            /// Enum DOMESTICL for value: DOMESTIC_L
            /// </summary>
            [EnumMember(Value = "DOMESTIC_L")]
            DOMESTICL = 14,
            /// <summary>
            /// Enum GBTAC for value: GBT_AC
            /// </summary>
            [EnumMember(Value = "GBT_AC")]
            GBTAC = 15,
            /// <summary>
            /// Enum GBTDC for value: GBT_DC
            /// </summary>
            [EnumMember(Value = "GBT_DC")]
            GBTDC = 16,
            /// <summary>
            /// Enum IEC603092single16 for value: IEC_60309_2_single_16
            /// </summary>
            [EnumMember(Value = "IEC_60309_2_single_16")]
            IEC603092single16 = 17,
            /// <summary>
            /// Enum IEC603092three16 for value: IEC_60309_2_three_16
            /// </summary>
            [EnumMember(Value = "IEC_60309_2_three_16")]
            IEC603092three16 = 18,
            /// <summary>
            /// Enum IEC603092three32 for value: IEC_60309_2_three_32
            /// </summary>
            [EnumMember(Value = "IEC_60309_2_three_32")]
            IEC603092three32 = 19,
            /// <summary>
            /// Enum IEC603092three64 for value: IEC_60309_2_three_64
            /// </summary>
            [EnumMember(Value = "IEC_60309_2_three_64")]
            IEC603092three64 = 20,
            /// <summary>
            /// Enum IEC62196T1 for value: IEC_62196_T1
            /// </summary>
            [EnumMember(Value = "IEC_62196_T1")]
            IEC62196T1 = 21,
            /// <summary>
            /// Enum IEC62196T1COMBO for value: IEC_62196_T1_COMBO
            /// </summary>
            [EnumMember(Value = "IEC_62196_T1_COMBO")]
            IEC62196T1COMBO = 22,
            /// <summary>
            /// Enum IEC62196T2 for value: IEC_62196_T2
            /// </summary>
            [EnumMember(Value = "IEC_62196_T2")]
            IEC62196T2 = 23,
            /// <summary>
            /// Enum IEC62196T2COMBO for value: IEC_62196_T2_COMBO
            /// </summary>
            [EnumMember(Value = "IEC_62196_T2_COMBO")]
            IEC62196T2COMBO = 24,
            /// <summary>
            /// Enum IEC62196T3A for value: IEC_62196_T3A
            /// </summary>
            [EnumMember(Value = "IEC_62196_T3A")]
            IEC62196T3A = 25,
            /// <summary>
            /// Enum IEC62196T3C for value: IEC_62196_T3C
            /// </summary>
            [EnumMember(Value = "IEC_62196_T3C")]
            IEC62196T3C = 26,
            /// <summary>
            /// Enum NEMA520 for value: NEMA_5_20
            /// </summary>
            [EnumMember(Value = "NEMA_5_20")]
            NEMA520 = 27,
            /// <summary>
            /// Enum NEMA630 for value: NEMA_6_30
            /// </summary>
            [EnumMember(Value = "NEMA_6_30")]
            NEMA630 = 28,
            /// <summary>
            /// Enum NEMA650 for value: NEMA_6_50
            /// </summary>
            [EnumMember(Value = "NEMA_6_50")]
            NEMA650 = 29,
            /// <summary>
            /// Enum NEMA1030 for value: NEMA_10_30
            /// </summary>
            [EnumMember(Value = "NEMA_10_30")]
            NEMA1030 = 30,
            /// <summary>
            /// Enum NEMA1050 for value: NEMA_10_50
            /// </summary>
            [EnumMember(Value = "NEMA_10_50")]
            NEMA1050 = 31,
            /// <summary>
            /// Enum NEMA1430 for value: NEMA_14_30
            /// </summary>
            [EnumMember(Value = "NEMA_14_30")]
            NEMA1430 = 32,
            /// <summary>
            /// Enum NEMA1450 for value: NEMA_14_50
            /// </summary>
            [EnumMember(Value = "NEMA_14_50")]
            NEMA1450 = 33,
            /// <summary>
            /// Enum PANTOGRAPHBOTTOMUP for value: PANTOGRAPH_BOTTOM_UP
            /// </summary>
            [EnumMember(Value = "PANTOGRAPH_BOTTOM_UP")]
            PANTOGRAPHBOTTOMUP = 34,
            /// <summary>
            /// Enum PANTOGRAPHTOPDOWN for value: PANTOGRAPH_TOP_DOWN
            /// </summary>
            [EnumMember(Value = "PANTOGRAPH_TOP_DOWN")]
            PANTOGRAPHTOPDOWN = 35,
            /// <summary>
            /// Enum TESLAR for value: TESLA_R
            /// </summary>
            [EnumMember(Value = "TESLA_R")]
            TESLAR = 36,
            /// <summary>
            /// Enum TESLAS for value: TESLA_S
            /// </summary>
            [EnumMember(Value = "TESLA_S")]
            TESLAS = 37,
            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 38        }
        /// <summary>
        /// Gets or Sets Standard
        /// </summary>
        [DataMember(Name="standard", EmitDefaultValue=false)]
        public StandardEnum Standard { get; set; }
        /// <summary>
        /// Defines Format
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum FormatEnum
        {
            /// <summary>
            /// Enum SOCKET for value: SOCKET
            /// </summary>
            [EnumMember(Value = "SOCKET")]
            SOCKET = 1,
            /// <summary>
            /// Enum CABLE for value: CABLE
            /// </summary>
            [EnumMember(Value = "CABLE")]
            CABLE = 2        }
        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public FormatEnum Format { get; set; }
        /// <summary>
        /// Defines PowerType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PowerTypeEnum
        {
            /// <summary>
            /// Enum AC1PHASE for value: AC_1_PHASE
            /// </summary>
            [EnumMember(Value = "AC_1_PHASE")]
            AC1PHASE = 1,
            /// <summary>
            /// Enum AC3PHASE for value: AC_3_PHASE
            /// </summary>
            [EnumMember(Value = "AC_3_PHASE")]
            AC3PHASE = 2,
            /// <summary>
            /// Enum DC for value: DC
            /// </summary>
            [EnumMember(Value = "DC")]
            DC = 3        }
        /// <summary>
        /// Gets or Sets PowerType
        /// </summary>
        [DataMember(Name="power_type", EmitDefaultValue=false)]
        public PowerTypeEnum PowerType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Connector" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="standard">standard (required).</param>
        /// <param name="format">format (required).</param>
        /// <param name="powerType">powerType (required).</param>
        /// <param name="maxVoltage">maxVoltage (required).</param>
        /// <param name="maxAmperage">maxAmperage (required).</param>
        public Connector(string id = default(string), StandardEnum standard = default(StandardEnum), FormatEnum format = default(FormatEnum), PowerTypeEnum powerType = default(PowerTypeEnum), int? maxVoltage = default(int?), int? maxAmperage = default(int?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Connector and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "standard" is required (not null)
            if (standard == null)
            {
                throw new InvalidDataException("standard is a required property for Connector and cannot be null");
            }
            else
            {
                this.Standard = standard;
            }
            // to ensure "format" is required (not null)
            if (format == null)
            {
                throw new InvalidDataException("format is a required property for Connector and cannot be null");
            }
            else
            {
                this.Format = format;
            }
            // to ensure "powerType" is required (not null)
            if (powerType == null)
            {
                throw new InvalidDataException("powerType is a required property for Connector and cannot be null");
            }
            else
            {
                this.PowerType = powerType;
            }
            // to ensure "maxVoltage" is required (not null)
            if (maxVoltage == null)
            {
                throw new InvalidDataException("maxVoltage is a required property for Connector and cannot be null");
            }
            else
            {
                this.MaxVoltage = maxVoltage;
            }
            // to ensure "maxAmperage" is required (not null)
            if (maxAmperage == null)
            {
                throw new InvalidDataException("maxAmperage is a required property for Connector and cannot be null");
            }
            else
            {
                this.MaxAmperage = maxAmperage;
            }
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }




        /// <summary>
        /// Gets or Sets MaxVoltage
        /// </summary>
        [DataMember(Name="max_voltage", EmitDefaultValue=false)]
        public int? MaxVoltage { get; set; }

        /// <summary>
        /// Gets or Sets MaxAmperage
        /// </summary>
        [DataMember(Name="max_amperage", EmitDefaultValue=false)]
        public int? MaxAmperage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Connector {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Standard: ").Append(Standard).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  PowerType: ").Append(PowerType).Append("\n");
            sb.Append("  MaxVoltage: ").Append(MaxVoltage).Append("\n");
            sb.Append("  MaxAmperage: ").Append(MaxAmperage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Connector);
        }

        /// <summary>
        /// Returns true if Connector instances are equal
        /// </summary>
        /// <param name="input">Instance of Connector to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Connector input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Standard == input.Standard ||
                    (this.Standard != null &&
                    this.Standard.Equals(input.Standard))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.PowerType == input.PowerType ||
                    (this.PowerType != null &&
                    this.PowerType.Equals(input.PowerType))
                ) && 
                (
                    this.MaxVoltage == input.MaxVoltage ||
                    (this.MaxVoltage != null &&
                    this.MaxVoltage.Equals(input.MaxVoltage))
                ) && 
                (
                    this.MaxAmperage == input.MaxAmperage ||
                    (this.MaxAmperage != null &&
                    this.MaxAmperage.Equals(input.MaxAmperage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Standard != null)
                    hashCode = hashCode * 59 + this.Standard.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.PowerType != null)
                    hashCode = hashCode * 59 + this.PowerType.GetHashCode();
                if (this.MaxVoltage != null)
                    hashCode = hashCode * 59 + this.MaxVoltage.GetHashCode();
                if (this.MaxAmperage != null)
                    hashCode = hashCode * 59 + this.MaxAmperage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

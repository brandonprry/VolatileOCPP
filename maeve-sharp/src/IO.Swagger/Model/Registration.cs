/* 
 * MaEVe CSMS
 *
 * Internal API to interact with the MaEVe CSMS, external clients should use OCPI.
 *
 * OpenAPI spec version: 0.0.0
 * Contact: maeve-team@thoughtworks.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// Defines the initial connection details for the OCPI registration process
    /// </summary>
    [DataContract]
        public partial class Registration :  IEquatable<Registration>, IValidatableObject
    {
        /// <summary>
        /// The status of the registration request. If the request is marked as &#x60;REGISTERED&#x60; then the token will be allowed to be used to access all endpoints avoiding the need for the OCPI registration process. If the request is marked as  &#x60;PENDING&#x60; then the token will only be allowed to access the &#x60;/ocpi/versions&#x60;, &#x60;/ocpi/2.2&#x60; and &#x60;/ocpi/2.2/credentials&#x60; endpoints. 
        /// </summary>
        /// <value>The status of the registration request. If the request is marked as &#x60;REGISTERED&#x60; then the token will be allowed to be used to access all endpoints avoiding the need for the OCPI registration process. If the request is marked as  &#x60;PENDING&#x60; then the token will only be allowed to access the &#x60;/ocpi/versions&#x60;, &#x60;/ocpi/2.2&#x60; and &#x60;/ocpi/2.2/credentials&#x60; endpoints. </value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 1,
            /// <summary>
            /// Enum REGISTERED for value: REGISTERED
            /// </summary>
            [EnumMember(Value = "REGISTERED")]
            REGISTERED = 2        }
        /// <summary>
        /// The status of the registration request. If the request is marked as &#x60;REGISTERED&#x60; then the token will be allowed to be used to access all endpoints avoiding the need for the OCPI registration process. If the request is marked as  &#x60;PENDING&#x60; then the token will only be allowed to access the &#x60;/ocpi/versions&#x60;, &#x60;/ocpi/2.2&#x60; and &#x60;/ocpi/2.2/credentials&#x60; endpoints. 
        /// </summary>
        /// <value>The status of the registration request. If the request is marked as &#x60;REGISTERED&#x60; then the token will be allowed to be used to access all endpoints avoiding the need for the OCPI registration process. If the request is marked as  &#x60;PENDING&#x60; then the token will only be allowed to access the &#x60;/ocpi/versions&#x60;, &#x60;/ocpi/2.2&#x60; and &#x60;/ocpi/2.2/credentials&#x60; endpoints. </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Registration" /> class.
        /// </summary>
        /// <param name="token">The token to use for communicating with the eMSP (CREDENTIALS_TOKEN_A). (required).</param>
        /// <param name="url">The URL of the eMSP versions endpoint. If provided the CSMS will act as the sender of the versions request..</param>
        /// <param name="status">The status of the registration request. If the request is marked as &#x60;REGISTERED&#x60; then the token will be allowed to be used to access all endpoints avoiding the need for the OCPI registration process. If the request is marked as  &#x60;PENDING&#x60; then the token will only be allowed to access the &#x60;/ocpi/versions&#x60;, &#x60;/ocpi/2.2&#x60; and &#x60;/ocpi/2.2/credentials&#x60; endpoints. .</param>
        public Registration(string token = default(string), string url = default(string), StatusEnum? status = default(StatusEnum?))
        {
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new InvalidDataException("token is a required property for Registration and cannot be null");
            }
            else
            {
                this.Token = token;
            }
            this.Url = url;
            this.Status = status;
        }
        
        /// <summary>
        /// The token to use for communicating with the eMSP (CREDENTIALS_TOKEN_A).
        /// </summary>
        /// <value>The token to use for communicating with the eMSP (CREDENTIALS_TOKEN_A).</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The URL of the eMSP versions endpoint. If provided the CSMS will act as the sender of the versions request.
        /// </summary>
        /// <value>The URL of the eMSP versions endpoint. If provided the CSMS will act as the sender of the versions request.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Registration {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Registration);
        }

        /// <summary>
        /// Returns true if Registration instances are equal
        /// </summary>
        /// <param name="input">Instance of Registration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Registration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

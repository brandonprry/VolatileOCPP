/* 
 * MaEVe CSMS
 *
 * Internal API to interact with the MaEVe CSMS, external clients should use OCPI.
 *
 * OpenAPI spec version: 0.0.0
 * Contact: maeve-team@thoughtworks.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// A charge station location
    /// </summary>
    [DataContract]
        public partial class Location :  IEquatable<Location>, IValidatableObject
    {
        /// <summary>
        /// Defines ParkingType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ParkingTypeEnum
        {
            /// <summary>
            /// Enum ALONGMOTORWAY for value: ALONG_MOTORWAY
            /// </summary>
            [EnumMember(Value = "ALONG_MOTORWAY")]
            ALONGMOTORWAY = 1,
            /// <summary>
            /// Enum PARKINGGARAGE for value: PARKING_GARAGE
            /// </summary>
            [EnumMember(Value = "PARKING_GARAGE")]
            PARKINGGARAGE = 2,
            /// <summary>
            /// Enum PARKINGLOT for value: PARKING_LOT
            /// </summary>
            [EnumMember(Value = "PARKING_LOT")]
            PARKINGLOT = 3,
            /// <summary>
            /// Enum ONDRIVEWAY for value: ON_DRIVEWAY
            /// </summary>
            [EnumMember(Value = "ON_DRIVEWAY")]
            ONDRIVEWAY = 4,
            /// <summary>
            /// Enum ONSTREET for value: ON_STREET
            /// </summary>
            [EnumMember(Value = "ON_STREET")]
            ONSTREET = 5,
            /// <summary>
            /// Enum UNDERGROUNDGARAGE for value: UNDERGROUND_GARAGE
            /// </summary>
            [EnumMember(Value = "UNDERGROUND_GARAGE")]
            UNDERGROUNDGARAGE = 6        }
        /// <summary>
        /// Gets or Sets ParkingType
        /// </summary>
        [DataMember(Name="parking_type", EmitDefaultValue=false)]
        public ParkingTypeEnum? ParkingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Location" /> class.
        /// </summary>
        /// <param name="countryCode">countryCode (required).</param>
        /// <param name="partyId">partyId (required).</param>
        /// <param name="name">name.</param>
        /// <param name="address">address (required).</param>
        /// <param name="city">city (required).</param>
        /// <param name="postalCode">postalCode.</param>
        /// <param name="country">country (required).</param>
        /// <param name="coordinates">coordinates (required).</param>
        /// <param name="parkingType">parkingType.</param>
        /// <param name="evses">evses.</param>
        public Location(string countryCode = default(string), string partyId = default(string), string name = default(string), string address = default(string), string city = default(string), string postalCode = default(string), string country = default(string), GeoLocation coordinates = default(GeoLocation), ParkingTypeEnum? parkingType = default(ParkingTypeEnum?), List<Evse> evses = default(List<Evse>))
        {
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new InvalidDataException("countryCode is a required property for Location and cannot be null");
            }
            else
            {
                this.CountryCode = countryCode;
            }
            // to ensure "partyId" is required (not null)
            if (partyId == null)
            {
                throw new InvalidDataException("partyId is a required property for Location and cannot be null");
            }
            else
            {
                this.PartyId = partyId;
            }
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for Location and cannot be null");
            }
            else
            {
                this.Address = address;
            }
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new InvalidDataException("city is a required property for Location and cannot be null");
            }
            else
            {
                this.City = city;
            }
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new InvalidDataException("country is a required property for Location and cannot be null");
            }
            else
            {
                this.Country = country;
            }
            // to ensure "coordinates" is required (not null)
            if (coordinates == null)
            {
                throw new InvalidDataException("coordinates is a required property for Location and cannot be null");
            }
            else
            {
                this.Coordinates = coordinates;
            }
            this.Name = name;
            this.PostalCode = postalCode;
            this.ParkingType = parkingType;
            this.Evses = evses;
        }
        
        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name="country_code", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets PartyId
        /// </summary>
        [DataMember(Name="party_id", EmitDefaultValue=false)]
        public string PartyId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name="postal_code", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Coordinates
        /// </summary>
        [DataMember(Name="coordinates", EmitDefaultValue=false)]
        public GeoLocation Coordinates { get; set; }


        /// <summary>
        /// Gets or Sets Evses
        /// </summary>
        [DataMember(Name="evses", EmitDefaultValue=false)]
        public List<Evse> Evses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Location {\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  PartyId: ").Append(PartyId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Coordinates: ").Append(Coordinates).Append("\n");
            sb.Append("  ParkingType: ").Append(ParkingType).Append("\n");
            sb.Append("  Evses: ").Append(Evses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Location);
        }

        /// <summary>
        /// Returns true if Location instances are equal
        /// </summary>
        /// <param name="input">Instance of Location to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Location input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.PartyId == input.PartyId ||
                    (this.PartyId != null &&
                    this.PartyId.Equals(input.PartyId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Coordinates == input.Coordinates ||
                    (this.Coordinates != null &&
                    this.Coordinates.Equals(input.Coordinates))
                ) && 
                (
                    this.ParkingType == input.ParkingType ||
                    (this.ParkingType != null &&
                    this.ParkingType.Equals(input.ParkingType))
                ) && 
                (
                    this.Evses == input.Evses ||
                    this.Evses != null &&
                    input.Evses != null &&
                    this.Evses.SequenceEqual(input.Evses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.PartyId != null)
                    hashCode = hashCode * 59 + this.PartyId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Coordinates != null)
                    hashCode = hashCode * 59 + this.Coordinates.GetHashCode();
                if (this.ParkingType != null)
                    hashCode = hashCode * 59 + this.ParkingType.GetHashCode();
                if (this.Evses != null)
                    hashCode = hashCode * 59 + this.Evses.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

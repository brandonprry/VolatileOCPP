/* 
 * MaEVe CSMS
 *
 * Internal API to interact with the MaEVe CSMS, external clients should use OCPI.
 *
 * OpenAPI spec version: 0.0.0
 * Contact: maeve-team@thoughtworks.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ocpp.maeve.Client.SwaggerDateConverter;
namespace ocpp.maeve.Model
{
    /// <summary>
    /// Connection details for a charge station
    /// </summary>
    [DataContract]
        public partial class ChargeStationAuth :  IEquatable<ChargeStationAuth>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeStationAuth" /> class.
        /// </summary>
        /// <param name="securityProfile">The security profile to use for the charge station: * &#x60;0&#x60; - unsecured transport with basic auth * &#x60;1&#x60; - TLS with basic auth * &#x60;2&#x60; - TLS with client certificate  (required).</param>
        /// <param name="base64SHA256Password">The base64 encoded, SHA-256 hash of the charge station password.</param>
        /// <param name="invalidUsernameAllowed">If set to true then an invalid username will not prevent the charge station connecting.</param>
        public ChargeStationAuth(int? securityProfile = default(int?), string base64SHA256Password = default(string), bool? invalidUsernameAllowed = default(bool?))
        {
            // to ensure "securityProfile" is required (not null)
            if (securityProfile == null)
            {
                throw new InvalidDataException("securityProfile is a required property for ChargeStationAuth and cannot be null");
            }
            else
            {
                this.SecurityProfile = securityProfile;
            }
            this.Base64SHA256Password = base64SHA256Password;
            this.InvalidUsernameAllowed = invalidUsernameAllowed;
        }
        
        /// <summary>
        /// The security profile to use for the charge station: * &#x60;0&#x60; - unsecured transport with basic auth * &#x60;1&#x60; - TLS with basic auth * &#x60;2&#x60; - TLS with client certificate 
        /// </summary>
        /// <value>The security profile to use for the charge station: * &#x60;0&#x60; - unsecured transport with basic auth * &#x60;1&#x60; - TLS with basic auth * &#x60;2&#x60; - TLS with client certificate </value>
        [DataMember(Name="securityProfile", EmitDefaultValue=false)]
        public int? SecurityProfile { get; set; }

        /// <summary>
        /// The base64 encoded, SHA-256 hash of the charge station password
        /// </summary>
        /// <value>The base64 encoded, SHA-256 hash of the charge station password</value>
        [DataMember(Name="base64SHA256Password", EmitDefaultValue=false)]
        public string Base64SHA256Password { get; set; }

        /// <summary>
        /// If set to true then an invalid username will not prevent the charge station connecting
        /// </summary>
        /// <value>If set to true then an invalid username will not prevent the charge station connecting</value>
        [DataMember(Name="invalidUsernameAllowed", EmitDefaultValue=false)]
        public bool? InvalidUsernameAllowed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChargeStationAuth {\n");
            sb.Append("  SecurityProfile: ").Append(SecurityProfile).Append("\n");
            sb.Append("  Base64SHA256Password: ").Append(Base64SHA256Password).Append("\n");
            sb.Append("  InvalidUsernameAllowed: ").Append(InvalidUsernameAllowed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChargeStationAuth);
        }

        /// <summary>
        /// Returns true if ChargeStationAuth instances are equal
        /// </summary>
        /// <param name="input">Instance of ChargeStationAuth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChargeStationAuth input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SecurityProfile == input.SecurityProfile ||
                    (this.SecurityProfile != null &&
                    this.SecurityProfile.Equals(input.SecurityProfile))
                ) && 
                (
                    this.Base64SHA256Password == input.Base64SHA256Password ||
                    (this.Base64SHA256Password != null &&
                    this.Base64SHA256Password.Equals(input.Base64SHA256Password))
                ) && 
                (
                    this.InvalidUsernameAllowed == input.InvalidUsernameAllowed ||
                    (this.InvalidUsernameAllowed != null &&
                    this.InvalidUsernameAllowed.Equals(input.InvalidUsernameAllowed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SecurityProfile != null)
                    hashCode = hashCode * 59 + this.SecurityProfile.GetHashCode();
                if (this.Base64SHA256Password != null)
                    hashCode = hashCode * 59 + this.Base64SHA256Password.GetHashCode();
                if (this.InvalidUsernameAllowed != null)
                    hashCode = hashCode * 59 + this.InvalidUsernameAllowed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

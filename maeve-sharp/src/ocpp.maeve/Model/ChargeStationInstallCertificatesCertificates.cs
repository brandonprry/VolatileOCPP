/* 
 * MaEVe CSMS
 *
 * Internal API to interact with the MaEVe CSMS, external clients should use OCPI.
 *
 * OpenAPI spec version: 0.0.0
 * Contact: maeve-team@thoughtworks.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ocpp.maeve.Client.SwaggerDateConverter;
namespace ocpp.maeve.Model
{
    /// <summary>
    /// The set of certificates to install
    /// </summary>
    [DataContract]
        public partial class ChargeStationInstallCertificatesCertificates :  IEquatable<ChargeStationInstallCertificatesCertificates>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum V2G for value: V2G
            /// </summary>
            [EnumMember(Value = "V2G")]
            V2G = 1,
            /// <summary>
            /// Enum MO for value: MO
            /// </summary>
            [EnumMember(Value = "MO")]
            MO = 2,
            /// <summary>
            /// Enum MF for value: MF
            /// </summary>
            [EnumMember(Value = "MF")]
            MF = 3,
            /// <summary>
            /// Enum CSMS for value: CSMS
            /// </summary>
            [EnumMember(Value = "CSMS")]
            CSMS = 4        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// The status, defaults to Pending
        /// </summary>
        /// <value>The status, defaults to Pending</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Accepted for value: Accepted
            /// </summary>
            [EnumMember(Value = "Accepted")]
            Accepted = 1,
            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            [EnumMember(Value = "Rejected")]
            Rejected = 2,
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            [EnumMember(Value = "Pending")]
            Pending = 3        }
        /// <summary>
        /// The status, defaults to Pending
        /// </summary>
        /// <value>The status, defaults to Pending</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChargeStationInstallCertificatesCertificates" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="certificate">The PEM encoded certificate with newlines replaced by &#x60;\\n&#x60; (required).</param>
        /// <param name="status">The status, defaults to Pending.</param>
        public ChargeStationInstallCertificatesCertificates(TypeEnum type = default(TypeEnum), string certificate = default(string), StatusEnum? status = default(StatusEnum?))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for ChargeStationInstallCertificatesCertificates and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "certificate" is required (not null)
            if (certificate == null)
            {
                throw new InvalidDataException("certificate is a required property for ChargeStationInstallCertificatesCertificates and cannot be null");
            }
            else
            {
                this.Certificate = certificate;
            }
            this.Status = status;
        }
        

        /// <summary>
        /// The PEM encoded certificate with newlines replaced by &#x60;\\n&#x60;
        /// </summary>
        /// <value>The PEM encoded certificate with newlines replaced by &#x60;\\n&#x60;</value>
        [DataMember(Name="certificate", EmitDefaultValue=false)]
        public string Certificate { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChargeStationInstallCertificatesCertificates {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Certificate: ").Append(Certificate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChargeStationInstallCertificatesCertificates);
        }

        /// <summary>
        /// Returns true if ChargeStationInstallCertificatesCertificates instances are equal
        /// </summary>
        /// <param name="input">Instance of ChargeStationInstallCertificatesCertificates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChargeStationInstallCertificatesCertificates input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Certificate == input.Certificate ||
                    (this.Certificate != null &&
                    this.Certificate.Equals(input.Certificate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Certificate != null)
                    hashCode = hashCode * 59 + this.Certificate.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * MaEVe CSMS
 *
 * Internal API to interact with the MaEVe CSMS, external clients should use OCPI.
 *
 * OpenAPI spec version: 0.0.0
 * Contact: maeve-team@thoughtworks.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ocpp.maeve.Client.SwaggerDateConverter;
namespace ocpp.maeve.Model
{
    /// <summary>
    /// An authorization token
    /// </summary>
    [DataContract]
        public partial class Token :  IEquatable<Token>, IValidatableObject
    {
        /// <summary>
        /// The type of token
        /// </summary>
        /// <value>The type of token</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum ADHOCUSER for value: AD_HOC_USER
            /// </summary>
            [EnumMember(Value = "AD_HOC_USER")]
            ADHOCUSER = 1,
            /// <summary>
            /// Enum APPUSER for value: APP_USER
            /// </summary>
            [EnumMember(Value = "APP_USER")]
            APPUSER = 2,
            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 3,
            /// <summary>
            /// Enum RFID for value: RFID
            /// </summary>
            [EnumMember(Value = "RFID")]
            RFID = 4        }
        /// <summary>
        /// The type of token
        /// </summary>
        /// <value>The type of token</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Indicates what type of token caching is allowed
        /// </summary>
        /// <value>Indicates what type of token caching is allowed</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CacheModeEnum
        {
            /// <summary>
            /// Enum ALWAYS for value: ALWAYS
            /// </summary>
            [EnumMember(Value = "ALWAYS")]
            ALWAYS = 1,
            /// <summary>
            /// Enum ALLOWED for value: ALLOWED
            /// </summary>
            [EnumMember(Value = "ALLOWED")]
            ALLOWED = 2,
            /// <summary>
            /// Enum ALLOWEDOFFLINE for value: ALLOWED_OFFLINE
            /// </summary>
            [EnumMember(Value = "ALLOWED_OFFLINE")]
            ALLOWEDOFFLINE = 3,
            /// <summary>
            /// Enum NEVER for value: NEVER
            /// </summary>
            [EnumMember(Value = "NEVER")]
            NEVER = 4        }
        /// <summary>
        /// Indicates what type of token caching is allowed
        /// </summary>
        /// <value>Indicates what type of token caching is allowed</value>
        [DataMember(Name="cacheMode", EmitDefaultValue=false)]
        public CacheModeEnum CacheMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Token" /> class.
        /// </summary>
        /// <param name="countryCode">The country code of the issuing eMSP (required).</param>
        /// <param name="partyId">The party id of the issuing eMSP (required).</param>
        /// <param name="type">The type of token (required).</param>
        /// <param name="uid">The unique token id (required).</param>
        /// <param name="contractId">The contract ID (eMAID) associated with the token (with optional component separators) (required).</param>
        /// <param name="visualNumber">The visual/readable number/identification printed on an RFID card.</param>
        /// <param name="issuer">Issuing company, most of the times the name of the company printed on the RFID card, not necessarily the eMSP (required).</param>
        /// <param name="groupId">This id groups a couple of tokens to make two or more tokens work as one.</param>
        /// <param name="valid">Is this token valid (required).</param>
        /// <param name="languageCode">The preferred language to use encoded as ISO 639-1 language code.</param>
        /// <param name="cacheMode">Indicates what type of token caching is allowed (required).</param>
        /// <param name="lastUpdated">The date the record was last updated (ignored on create/update).</param>
        public Token(string countryCode = default(string), string partyId = default(string), TypeEnum type = default(TypeEnum), string uid = default(string), string contractId = default(string), string visualNumber = default(string), string issuer = default(string), string groupId = default(string), bool? valid = default(bool?), string languageCode = default(string), CacheModeEnum cacheMode = default(CacheModeEnum), DateTime? lastUpdated = default(DateTime?))
        {
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new InvalidDataException("countryCode is a required property for Token and cannot be null");
            }
            else
            {
                this.CountryCode = countryCode;
            }
            // to ensure "partyId" is required (not null)
            if (partyId == null)
            {
                throw new InvalidDataException("partyId is a required property for Token and cannot be null");
            }
            else
            {
                this.PartyId = partyId;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Token and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "uid" is required (not null)
            if (uid == null)
            {
                throw new InvalidDataException("uid is a required property for Token and cannot be null");
            }
            else
            {
                this.Uid = uid;
            }
            // to ensure "contractId" is required (not null)
            if (contractId == null)
            {
                throw new InvalidDataException("contractId is a required property for Token and cannot be null");
            }
            else
            {
                this.ContractId = contractId;
            }
            // to ensure "issuer" is required (not null)
            if (issuer == null)
            {
                throw new InvalidDataException("issuer is a required property for Token and cannot be null");
            }
            else
            {
                this.Issuer = issuer;
            }
            // to ensure "valid" is required (not null)
            if (valid == null)
            {
                throw new InvalidDataException("valid is a required property for Token and cannot be null");
            }
            else
            {
                this.Valid = valid;
            }
            // to ensure "cacheMode" is required (not null)
            if (cacheMode == null)
            {
                throw new InvalidDataException("cacheMode is a required property for Token and cannot be null");
            }
            else
            {
                this.CacheMode = cacheMode;
            }
            this.VisualNumber = visualNumber;
            this.GroupId = groupId;
            this.LanguageCode = languageCode;
            this.LastUpdated = lastUpdated;
        }
        
        /// <summary>
        /// The country code of the issuing eMSP
        /// </summary>
        /// <value>The country code of the issuing eMSP</value>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The party id of the issuing eMSP
        /// </summary>
        /// <value>The party id of the issuing eMSP</value>
        [DataMember(Name="partyId", EmitDefaultValue=false)]
        public string PartyId { get; set; }


        /// <summary>
        /// The unique token id
        /// </summary>
        /// <value>The unique token id</value>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; set; }

        /// <summary>
        /// The contract ID (eMAID) associated with the token (with optional component separators)
        /// </summary>
        /// <value>The contract ID (eMAID) associated with the token (with optional component separators)</value>
        [DataMember(Name="contractId", EmitDefaultValue=false)]
        public string ContractId { get; set; }

        /// <summary>
        /// The visual/readable number/identification printed on an RFID card
        /// </summary>
        /// <value>The visual/readable number/identification printed on an RFID card</value>
        [DataMember(Name="visualNumber", EmitDefaultValue=false)]
        public string VisualNumber { get; set; }

        /// <summary>
        /// Issuing company, most of the times the name of the company printed on the RFID card, not necessarily the eMSP
        /// </summary>
        /// <value>Issuing company, most of the times the name of the company printed on the RFID card, not necessarily the eMSP</value>
        [DataMember(Name="issuer", EmitDefaultValue=false)]
        public string Issuer { get; set; }

        /// <summary>
        /// This id groups a couple of tokens to make two or more tokens work as one
        /// </summary>
        /// <value>This id groups a couple of tokens to make two or more tokens work as one</value>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public string GroupId { get; set; }

        /// <summary>
        /// Is this token valid
        /// </summary>
        /// <value>Is this token valid</value>
        [DataMember(Name="valid", EmitDefaultValue=false)]
        public bool? Valid { get; set; }

        /// <summary>
        /// The preferred language to use encoded as ISO 639-1 language code
        /// </summary>
        /// <value>The preferred language to use encoded as ISO 639-1 language code</value>
        [DataMember(Name="languageCode", EmitDefaultValue=false)]
        public string LanguageCode { get; set; }


        /// <summary>
        /// The date the record was last updated (ignored on create/update)
        /// </summary>
        /// <value>The date the record was last updated (ignored on create/update)</value>
        [DataMember(Name="lastUpdated", EmitDefaultValue=false)]
        public DateTime? LastUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Token {\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  PartyId: ").Append(PartyId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  VisualNumber: ").Append(VisualNumber).Append("\n");
            sb.Append("  Issuer: ").Append(Issuer).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  CacheMode: ").Append(CacheMode).Append("\n");
            sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Token);
        }

        /// <summary>
        /// Returns true if Token instances are equal
        /// </summary>
        /// <param name="input">Instance of Token to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Token input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.PartyId == input.PartyId ||
                    (this.PartyId != null &&
                    this.PartyId.Equals(input.PartyId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                ) && 
                (
                    this.ContractId == input.ContractId ||
                    (this.ContractId != null &&
                    this.ContractId.Equals(input.ContractId))
                ) && 
                (
                    this.VisualNumber == input.VisualNumber ||
                    (this.VisualNumber != null &&
                    this.VisualNumber.Equals(input.VisualNumber))
                ) && 
                (
                    this.Issuer == input.Issuer ||
                    (this.Issuer != null &&
                    this.Issuer.Equals(input.Issuer))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.Valid == input.Valid ||
                    (this.Valid != null &&
                    this.Valid.Equals(input.Valid))
                ) && 
                (
                    this.LanguageCode == input.LanguageCode ||
                    (this.LanguageCode != null &&
                    this.LanguageCode.Equals(input.LanguageCode))
                ) && 
                (
                    this.CacheMode == input.CacheMode ||
                    (this.CacheMode != null &&
                    this.CacheMode.Equals(input.CacheMode))
                ) && 
                (
                    this.LastUpdated == input.LastUpdated ||
                    (this.LastUpdated != null &&
                    this.LastUpdated.Equals(input.LastUpdated))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                if (this.PartyId != null)
                    hashCode = hashCode * 59 + this.PartyId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Uid != null)
                    hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.ContractId != null)
                    hashCode = hashCode * 59 + this.ContractId.GetHashCode();
                if (this.VisualNumber != null)
                    hashCode = hashCode * 59 + this.VisualNumber.GetHashCode();
                if (this.Issuer != null)
                    hashCode = hashCode * 59 + this.Issuer.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.Valid != null)
                    hashCode = hashCode * 59 + this.Valid.GetHashCode();
                if (this.LanguageCode != null)
                    hashCode = hashCode * 59 + this.LanguageCode.GetHashCode();
                if (this.CacheMode != null)
                    hashCode = hashCode * 59 + this.CacheMode.GetHashCode();
                if (this.LastUpdated != null)
                    hashCode = hashCode * 59 + this.LastUpdated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

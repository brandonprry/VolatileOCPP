/* 
 * MaEVe CSMS
 *
 * Internal API to interact with the MaEVe CSMS, external clients should use OCPI.
 *
 * OpenAPI spec version: 0.0.0
 * Contact: maeve-team@thoughtworks.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ocpp.maeve.Client.SwaggerDateConverter;
namespace ocpp.maeve.Model
{
    /// <summary>
    /// Evse
    /// </summary>
    [DataContract]
        public partial class Evse :  IEquatable<Evse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Evse" /> class.
        /// </summary>
        /// <param name="uid">Uniquely identifies the EVSE within the CPOs platform (and suboperator platforms). (required).</param>
        /// <param name="evseId">evseId.</param>
        /// <param name="connectors">connectors (required).</param>
        public Evse(string uid = default(string), string evseId = default(string), List<Connector> connectors = default(List<Connector>))
        {
            // to ensure "uid" is required (not null)
            if (uid == null)
            {
                throw new InvalidDataException("uid is a required property for Evse and cannot be null");
            }
            else
            {
                this.Uid = uid;
            }
            // to ensure "connectors" is required (not null)
            if (connectors == null)
            {
                throw new InvalidDataException("connectors is a required property for Evse and cannot be null");
            }
            else
            {
                this.Connectors = connectors;
            }
            this.EvseId = evseId;
        }
        
        /// <summary>
        /// Uniquely identifies the EVSE within the CPOs platform (and suboperator platforms).
        /// </summary>
        /// <value>Uniquely identifies the EVSE within the CPOs platform (and suboperator platforms).</value>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; set; }

        /// <summary>
        /// Gets or Sets EvseId
        /// </summary>
        [DataMember(Name="evse_id", EmitDefaultValue=false)]
        public string EvseId { get; set; }

        /// <summary>
        /// Gets or Sets Connectors
        /// </summary>
        [DataMember(Name="connectors", EmitDefaultValue=false)]
        public List<Connector> Connectors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Evse {\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  EvseId: ").Append(EvseId).Append("\n");
            sb.Append("  Connectors: ").Append(Connectors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Evse);
        }

        /// <summary>
        /// Returns true if Evse instances are equal
        /// </summary>
        /// <param name="input">Instance of Evse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Evse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                ) && 
                (
                    this.EvseId == input.EvseId ||
                    (this.EvseId != null &&
                    this.EvseId.Equals(input.EvseId))
                ) && 
                (
                    this.Connectors == input.Connectors ||
                    this.Connectors != null &&
                    input.Connectors != null &&
                    this.Connectors.SequenceEqual(input.Connectors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Uid != null)
                    hashCode = hashCode * 59 + this.Uid.GetHashCode();
                if (this.EvseId != null)
                    hashCode = hashCode * 59 + this.EvseId.GetHashCode();
                if (this.Connectors != null)
                    hashCode = hashCode * 59 + this.Connectors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

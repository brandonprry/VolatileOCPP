/* 
 * MaEVe CSMS
 *
 * Internal API to interact with the MaEVe CSMS, external clients should use OCPI.
 *
 * OpenAPI spec version: 0.0.0
 * Contact: maeve-team@thoughtworks.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ocpp.maeve.Client;
using ocpp.maeve.Model;

namespace ocpp.maeve.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a certificate
        /// </summary>
        /// <remarks>
        /// Deletes a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash of the DER bytes. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateHash"></param>
        /// <returns></returns>
        void DeleteCertificate (string certificateHash);

        /// <summary>
        /// Delete a certificate
        /// </summary>
        /// <remarks>
        /// Deletes a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash of the DER bytes. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateHash"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCertificateWithHttpInfo (string certificateHash);
        /// <summary>
        /// Install certificates on the charge station
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns></returns>
        void InstallChargeStationCertificates (ChargeStationInstallCertificates body, string csId);

        /// <summary>
        /// Install certificates on the charge station
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InstallChargeStationCertificatesWithHttpInfo (ChargeStationInstallCertificates body, string csId);
        /// <summary>
        /// List authorization tokens
        /// </summary>
        /// <remarks>
        /// Lists all tokens that can be used to authorize a charge 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>List&lt;Token&gt;</returns>
        List<Token> ListTokens (int? offset = null, int? limit = null);

        /// <summary>
        /// List authorization tokens
        /// </summary>
        /// <remarks>
        /// Lists all tokens that can be used to authorize a charge 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Token&gt;</returns>
        ApiResponse<List<Token>> ListTokensWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Lookup a certificate
        /// </summary>
        /// <remarks>
        /// Lookup a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash of the DER bytes. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateHash"></param>
        /// <returns>Certificate</returns>
        Certificate LookupCertificate (string certificateHash);

        /// <summary>
        /// Lookup a certificate
        /// </summary>
        /// <remarks>
        /// Lookup a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash of the DER bytes. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateHash"></param>
        /// <returns>ApiResponse of Certificate</returns>
        ApiResponse<Certificate> LookupCertificateWithHttpInfo (string certificateHash);
        /// <summary>
        /// Returns the authentication details
        /// </summary>
        /// <remarks>
        /// Returns the details required by the CSMS gateway to determine how to authenticate the charge station 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>ChargeStationAuth</returns>
        ChargeStationAuth LookupChargeStationAuth (string csId);

        /// <summary>
        /// Returns the authentication details
        /// </summary>
        /// <remarks>
        /// Returns the details required by the CSMS gateway to determine how to authenticate the charge station 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>ApiResponse of ChargeStationAuth</returns>
        ApiResponse<ChargeStationAuth> LookupChargeStationAuthWithHttpInfo (string csId);
        /// <summary>
        /// Lookup an authorization token
        /// </summary>
        /// <remarks>
        /// Lookup a token that can be used to authorize a charge 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenUid"></param>
        /// <returns>Token</returns>
        Token LookupToken (string tokenUid);

        /// <summary>
        /// Lookup an authorization token
        /// </summary>
        /// <remarks>
        /// Lookup a token that can be used to authorize a charge 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenUid"></param>
        /// <returns>ApiResponse of Token</returns>
        ApiResponse<Token> LookupTokenWithHttpInfo (string tokenUid);
        /// <summary>
        /// Reconfigure the charge station
        /// </summary>
        /// <remarks>
        /// Supplies new configuration that should be applied to the charge station. This is not intended to be used as a general charge station provisioning mechanism, it is intended for one time changes required during testing. After reconfiguration, the charge station will be rebooted so the new configuration can take effect if instructed to. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns></returns>
        void ReconfigureChargeStation (Dictionary<string, string> body, string csId);

        /// <summary>
        /// Reconfigure the charge station
        /// </summary>
        /// <remarks>
        /// Supplies new configuration that should be applied to the charge station. This is not intended to be used as a general charge station provisioning mechanism, it is intended for one time changes required during testing. After reconfiguration, the charge station will be rebooted so the new configuration can take effect if instructed to. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ReconfigureChargeStationWithHttpInfo (Dictionary<string, string> body, string csId);
        /// <summary>
        /// Register a new charge station
        /// </summary>
        /// <remarks>
        /// Registers a new charge station. The system will assume that the charge station has not yet been provisioned and will place the charge station into a pending state so it can been configured when it sends a boot notification. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns></returns>
        void RegisterChargeStation (ChargeStationAuth body, string csId);

        /// <summary>
        /// Register a new charge station
        /// </summary>
        /// <remarks>
        /// Registers a new charge station. The system will assume that the charge station has not yet been provisioned and will place the charge station into a pending state so it can been configured when it sends a boot notification. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RegisterChargeStationWithHttpInfo (ChargeStationAuth body, string csId);
        /// <summary>
        /// Registers a location with the CSMS
        /// </summary>
        /// <remarks>
        /// Registers a location with the CSMS. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="locationId">The location identifier</param>
        /// <returns></returns>
        void RegisterLocation (Location body, string locationId);

        /// <summary>
        /// Registers a location with the CSMS
        /// </summary>
        /// <remarks>
        /// Registers a location with the CSMS. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="locationId">The location identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RegisterLocationWithHttpInfo (Location body, string locationId);
        /// <summary>
        /// Registers an OCPI party with the CSMS
        /// </summary>
        /// <remarks>
        /// Registers an OCPI party with the CSMS. Depending on the configuration provided the CSMS will either initiate a registration with the party or the party will wait for the party to initiate  a registration with the CSMS. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void RegisterParty (Registration body);

        /// <summary>
        /// Registers an OCPI party with the CSMS
        /// </summary>
        /// <remarks>
        /// Registers an OCPI party with the CSMS. Depending on the configuration provided the CSMS will either initiate a registration with the party or the party will wait for the party to initiate  a registration with the CSMS. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RegisterPartyWithHttpInfo (Registration body);
        /// <summary>
        /// Create/update an authorization token
        /// </summary>
        /// <remarks>
        /// Creates or updates a token that can be used to authorize a charge 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void SetToken (Token body);

        /// <summary>
        /// Create/update an authorization token
        /// </summary>
        /// <remarks>
        /// Creates or updates a token that can be used to authorize a charge 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetTokenWithHttpInfo (Token body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns></returns>
        void TriggerChargeStation (ChargeStationTrigger body, string csId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TriggerChargeStationWithHttpInfo (ChargeStationTrigger body, string csId);
        /// <summary>
        /// Upload a certificate
        /// </summary>
        /// <remarks>
        /// Uploads a client certificate to the CSMS. The CSMS can use the certificate to authenticate the charge station using mutual TLS when the TLS operations are being offloaded to a load-balancer. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void UploadCertificate (Certificate body);

        /// <summary>
        /// Upload a certificate
        /// </summary>
        /// <remarks>
        /// Uploads a client certificate to the CSMS. The CSMS can use the certificate to authenticate the charge station using mutual TLS when the TLS operations are being offloaded to a load-balancer. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadCertificateWithHttpInfo (Certificate body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a certificate
        /// </summary>
        /// <remarks>
        /// Deletes a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash of the DER bytes. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateHash"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCertificateAsync (string certificateHash);

        /// <summary>
        /// Delete a certificate
        /// </summary>
        /// <remarks>
        /// Deletes a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash of the DER bytes. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateHash"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCertificateAsyncWithHttpInfo (string certificateHash);
        /// <summary>
        /// Install certificates on the charge station
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InstallChargeStationCertificatesAsync (ChargeStationInstallCertificates body, string csId);

        /// <summary>
        /// Install certificates on the charge station
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InstallChargeStationCertificatesAsyncWithHttpInfo (ChargeStationInstallCertificates body, string csId);
        /// <summary>
        /// List authorization tokens
        /// </summary>
        /// <remarks>
        /// Lists all tokens that can be used to authorize a charge 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of List&lt;Token&gt;</returns>
        System.Threading.Tasks.Task<List<Token>> ListTokensAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// List authorization tokens
        /// </summary>
        /// <remarks>
        /// Lists all tokens that can be used to authorize a charge 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Token&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Token>>> ListTokensAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// Lookup a certificate
        /// </summary>
        /// <remarks>
        /// Lookup a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash of the DER bytes. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateHash"></param>
        /// <returns>Task of Certificate</returns>
        System.Threading.Tasks.Task<Certificate> LookupCertificateAsync (string certificateHash);

        /// <summary>
        /// Lookup a certificate
        /// </summary>
        /// <remarks>
        /// Lookup a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash of the DER bytes. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateHash"></param>
        /// <returns>Task of ApiResponse (Certificate)</returns>
        System.Threading.Tasks.Task<ApiResponse<Certificate>> LookupCertificateAsyncWithHttpInfo (string certificateHash);
        /// <summary>
        /// Returns the authentication details
        /// </summary>
        /// <remarks>
        /// Returns the details required by the CSMS gateway to determine how to authenticate the charge station 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of ChargeStationAuth</returns>
        System.Threading.Tasks.Task<ChargeStationAuth> LookupChargeStationAuthAsync (string csId);

        /// <summary>
        /// Returns the authentication details
        /// </summary>
        /// <remarks>
        /// Returns the details required by the CSMS gateway to determine how to authenticate the charge station 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of ApiResponse (ChargeStationAuth)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChargeStationAuth>> LookupChargeStationAuthAsyncWithHttpInfo (string csId);
        /// <summary>
        /// Lookup an authorization token
        /// </summary>
        /// <remarks>
        /// Lookup a token that can be used to authorize a charge 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenUid"></param>
        /// <returns>Task of Token</returns>
        System.Threading.Tasks.Task<Token> LookupTokenAsync (string tokenUid);

        /// <summary>
        /// Lookup an authorization token
        /// </summary>
        /// <remarks>
        /// Lookup a token that can be used to authorize a charge 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenUid"></param>
        /// <returns>Task of ApiResponse (Token)</returns>
        System.Threading.Tasks.Task<ApiResponse<Token>> LookupTokenAsyncWithHttpInfo (string tokenUid);
        /// <summary>
        /// Reconfigure the charge station
        /// </summary>
        /// <remarks>
        /// Supplies new configuration that should be applied to the charge station. This is not intended to be used as a general charge station provisioning mechanism, it is intended for one time changes required during testing. After reconfiguration, the charge station will be rebooted so the new configuration can take effect if instructed to. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ReconfigureChargeStationAsync (Dictionary<string, string> body, string csId);

        /// <summary>
        /// Reconfigure the charge station
        /// </summary>
        /// <remarks>
        /// Supplies new configuration that should be applied to the charge station. This is not intended to be used as a general charge station provisioning mechanism, it is intended for one time changes required during testing. After reconfiguration, the charge station will be rebooted so the new configuration can take effect if instructed to. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ReconfigureChargeStationAsyncWithHttpInfo (Dictionary<string, string> body, string csId);
        /// <summary>
        /// Register a new charge station
        /// </summary>
        /// <remarks>
        /// Registers a new charge station. The system will assume that the charge station has not yet been provisioned and will place the charge station into a pending state so it can been configured when it sends a boot notification. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RegisterChargeStationAsync (ChargeStationAuth body, string csId);

        /// <summary>
        /// Register a new charge station
        /// </summary>
        /// <remarks>
        /// Registers a new charge station. The system will assume that the charge station has not yet been provisioned and will place the charge station into a pending state so it can been configured when it sends a boot notification. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegisterChargeStationAsyncWithHttpInfo (ChargeStationAuth body, string csId);
        /// <summary>
        /// Registers a location with the CSMS
        /// </summary>
        /// <remarks>
        /// Registers a location with the CSMS. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="locationId">The location identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RegisterLocationAsync (Location body, string locationId);

        /// <summary>
        /// Registers a location with the CSMS
        /// </summary>
        /// <remarks>
        /// Registers a location with the CSMS. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="locationId">The location identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegisterLocationAsyncWithHttpInfo (Location body, string locationId);
        /// <summary>
        /// Registers an OCPI party with the CSMS
        /// </summary>
        /// <remarks>
        /// Registers an OCPI party with the CSMS. Depending on the configuration provided the CSMS will either initiate a registration with the party or the party will wait for the party to initiate  a registration with the CSMS. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RegisterPartyAsync (Registration body);

        /// <summary>
        /// Registers an OCPI party with the CSMS
        /// </summary>
        /// <remarks>
        /// Registers an OCPI party with the CSMS. Depending on the configuration provided the CSMS will either initiate a registration with the party or the party will wait for the party to initiate  a registration with the CSMS. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RegisterPartyAsyncWithHttpInfo (Registration body);
        /// <summary>
        /// Create/update an authorization token
        /// </summary>
        /// <remarks>
        /// Creates or updates a token that can be used to authorize a charge 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetTokenAsync (Token body);

        /// <summary>
        /// Create/update an authorization token
        /// </summary>
        /// <remarks>
        /// Creates or updates a token that can be used to authorize a charge 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetTokenAsyncWithHttpInfo (Token body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TriggerChargeStationAsync (ChargeStationTrigger body, string csId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TriggerChargeStationAsyncWithHttpInfo (ChargeStationTrigger body, string csId);
        /// <summary>
        /// Upload a certificate
        /// </summary>
        /// <remarks>
        /// Uploads a client certificate to the CSMS. The CSMS can use the certificate to authenticate the charge station using mutual TLS when the TLS operations are being offloaded to a load-balancer. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadCertificateAsync (Certificate body);

        /// <summary>
        /// Upload a certificate
        /// </summary>
        /// <remarks>
        /// Uploads a client certificate to the CSMS. The CSMS can use the certificate to authenticate the charge station using mutual TLS when the TLS operations are being offloaded to a load-balancer. 
        /// </remarks>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadCertificateAsyncWithHttpInfo (Certificate body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private ocpp.maeve.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new ocpp.maeve.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ocpp.maeve.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = ocpp.maeve.Client.Configuration.Default;

            ExceptionFactory = ocpp.maeve.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(ocpp.maeve.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ocpp.maeve.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ocpp.maeve.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ocpp.maeve.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ocpp.maeve.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a certificate Deletes a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash of the DER bytes. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateHash"></param>
        /// <returns></returns>
        public void DeleteCertificate (string certificateHash)
        {
             DeleteCertificateWithHttpInfo(certificateHash);
        }

        /// <summary>
        /// Delete a certificate Deletes a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash of the DER bytes. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateHash"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCertificateWithHttpInfo (string certificateHash)
        {
            // verify the required parameter 'certificateHash' is set
            if (certificateHash == null)
                throw new ApiException(400, "Missing required parameter 'certificateHash' when calling DefaultApi->DeleteCertificate");

            var localVarPath = "/certificate/{certificateHash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateHash != null) localVarPathParams.Add("certificateHash", this.Configuration.ApiClient.ParameterToString(certificateHash)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a certificate Deletes a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash of the DER bytes. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateHash"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCertificateAsync (string certificateHash)
        {
             await DeleteCertificateAsyncWithHttpInfo(certificateHash);

        }

        /// <summary>
        /// Delete a certificate Deletes a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash of the DER bytes. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateHash"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCertificateAsyncWithHttpInfo (string certificateHash)
        {
            // verify the required parameter 'certificateHash' is set
            if (certificateHash == null)
                throw new ApiException(400, "Missing required parameter 'certificateHash' when calling DefaultApi->DeleteCertificate");

            var localVarPath = "/certificate/{certificateHash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateHash != null) localVarPathParams.Add("certificateHash", this.Configuration.ApiClient.ParameterToString(certificateHash)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Install certificates on the charge station 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns></returns>
        public void InstallChargeStationCertificates (ChargeStationInstallCertificates body, string csId)
        {
             InstallChargeStationCertificatesWithHttpInfo(body, csId);
        }

        /// <summary>
        /// Install certificates on the charge station 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> InstallChargeStationCertificatesWithHttpInfo (ChargeStationInstallCertificates body, string csId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->InstallChargeStationCertificates");
            // verify the required parameter 'csId' is set
            if (csId == null)
                throw new ApiException(400, "Missing required parameter 'csId' when calling DefaultApi->InstallChargeStationCertificates");

            var localVarPath = "/cs/{csId}/certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (csId != null) localVarPathParams.Add("csId", this.Configuration.ApiClient.ParameterToString(csId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstallChargeStationCertificates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Install certificates on the charge station 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InstallChargeStationCertificatesAsync (ChargeStationInstallCertificates body, string csId)
        {
             await InstallChargeStationCertificatesAsyncWithHttpInfo(body, csId);

        }

        /// <summary>
        /// Install certificates on the charge station 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> InstallChargeStationCertificatesAsyncWithHttpInfo (ChargeStationInstallCertificates body, string csId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->InstallChargeStationCertificates");
            // verify the required parameter 'csId' is set
            if (csId == null)
                throw new ApiException(400, "Missing required parameter 'csId' when calling DefaultApi->InstallChargeStationCertificates");

            var localVarPath = "/cs/{csId}/certificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (csId != null) localVarPathParams.Add("csId", this.Configuration.ApiClient.ParameterToString(csId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InstallChargeStationCertificates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List authorization tokens Lists all tokens that can be used to authorize a charge 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>List&lt;Token&gt;</returns>
        public List<Token> ListTokens (int? offset = null, int? limit = null)
        {
             ApiResponse<List<Token>> localVarResponse = ListTokensWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List authorization tokens Lists all tokens that can be used to authorize a charge 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Token&gt;</returns>
        public ApiResponse< List<Token> > ListTokensWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Token>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Token>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Token>)));
        }

        /// <summary>
        /// List authorization tokens Lists all tokens that can be used to authorize a charge 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of List&lt;Token&gt;</returns>
        public async System.Threading.Tasks.Task<List<Token>> ListTokensAsync (int? offset = null, int? limit = null)
        {
             ApiResponse<List<Token>> localVarResponse = await ListTokensAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List authorization tokens Lists all tokens that can be used to authorize a charge 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Token&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Token>>> ListTokensAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTokens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Token>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Token>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Token>)));
        }

        /// <summary>
        /// Lookup a certificate Lookup a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash of the DER bytes. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateHash"></param>
        /// <returns>Certificate</returns>
        public Certificate LookupCertificate (string certificateHash)
        {
             ApiResponse<Certificate> localVarResponse = LookupCertificateWithHttpInfo(certificateHash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup a certificate Lookup a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash of the DER bytes. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateHash"></param>
        /// <returns>ApiResponse of Certificate</returns>
        public ApiResponse< Certificate > LookupCertificateWithHttpInfo (string certificateHash)
        {
            // verify the required parameter 'certificateHash' is set
            if (certificateHash == null)
                throw new ApiException(400, "Missing required parameter 'certificateHash' when calling DefaultApi->LookupCertificate");

            var localVarPath = "/certificate/{certificateHash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateHash != null) localVarPathParams.Add("certificateHash", this.Configuration.ApiClient.ParameterToString(certificateHash)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LookupCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Certificate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Certificate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Certificate)));
        }

        /// <summary>
        /// Lookup a certificate Lookup a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash of the DER bytes. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateHash"></param>
        /// <returns>Task of Certificate</returns>
        public async System.Threading.Tasks.Task<Certificate> LookupCertificateAsync (string certificateHash)
        {
             ApiResponse<Certificate> localVarResponse = await LookupCertificateAsyncWithHttpInfo(certificateHash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lookup a certificate Lookup a client certificate that has been uploaded to the CSMS using a base64 encoded SHA-256 hash of the DER bytes. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificateHash"></param>
        /// <returns>Task of ApiResponse (Certificate)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Certificate>> LookupCertificateAsyncWithHttpInfo (string certificateHash)
        {
            // verify the required parameter 'certificateHash' is set
            if (certificateHash == null)
                throw new ApiException(400, "Missing required parameter 'certificateHash' when calling DefaultApi->LookupCertificate");

            var localVarPath = "/certificate/{certificateHash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (certificateHash != null) localVarPathParams.Add("certificateHash", this.Configuration.ApiClient.ParameterToString(certificateHash)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LookupCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Certificate>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Certificate) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Certificate)));
        }

        /// <summary>
        /// Returns the authentication details Returns the details required by the CSMS gateway to determine how to authenticate the charge station 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>ChargeStationAuth</returns>
        public ChargeStationAuth LookupChargeStationAuth (string csId)
        {
             ApiResponse<ChargeStationAuth> localVarResponse = LookupChargeStationAuthWithHttpInfo(csId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the authentication details Returns the details required by the CSMS gateway to determine how to authenticate the charge station 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>ApiResponse of ChargeStationAuth</returns>
        public ApiResponse< ChargeStationAuth > LookupChargeStationAuthWithHttpInfo (string csId)
        {
            // verify the required parameter 'csId' is set
            if (csId == null)
                throw new ApiException(400, "Missing required parameter 'csId' when calling DefaultApi->LookupChargeStationAuth");

            var localVarPath = "/cs/{csId}/auth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (csId != null) localVarPathParams.Add("csId", this.Configuration.ApiClient.ParameterToString(csId)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LookupChargeStationAuth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargeStationAuth>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ChargeStationAuth) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargeStationAuth)));
        }

        /// <summary>
        /// Returns the authentication details Returns the details required by the CSMS gateway to determine how to authenticate the charge station 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of ChargeStationAuth</returns>
        public async System.Threading.Tasks.Task<ChargeStationAuth> LookupChargeStationAuthAsync (string csId)
        {
             ApiResponse<ChargeStationAuth> localVarResponse = await LookupChargeStationAuthAsyncWithHttpInfo(csId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the authentication details Returns the details required by the CSMS gateway to determine how to authenticate the charge station 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of ApiResponse (ChargeStationAuth)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChargeStationAuth>> LookupChargeStationAuthAsyncWithHttpInfo (string csId)
        {
            // verify the required parameter 'csId' is set
            if (csId == null)
                throw new ApiException(400, "Missing required parameter 'csId' when calling DefaultApi->LookupChargeStationAuth");

            var localVarPath = "/cs/{csId}/auth";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (csId != null) localVarPathParams.Add("csId", this.Configuration.ApiClient.ParameterToString(csId)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LookupChargeStationAuth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChargeStationAuth>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ChargeStationAuth) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChargeStationAuth)));
        }

        /// <summary>
        /// Lookup an authorization token Lookup a token that can be used to authorize a charge 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenUid"></param>
        /// <returns>Token</returns>
        public Token LookupToken (string tokenUid)
        {
             ApiResponse<Token> localVarResponse = LookupTokenWithHttpInfo(tokenUid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lookup an authorization token Lookup a token that can be used to authorize a charge 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenUid"></param>
        /// <returns>ApiResponse of Token</returns>
        public ApiResponse< Token > LookupTokenWithHttpInfo (string tokenUid)
        {
            // verify the required parameter 'tokenUid' is set
            if (tokenUid == null)
                throw new ApiException(400, "Missing required parameter 'tokenUid' when calling DefaultApi->LookupToken");

            var localVarPath = "/token/{tokenUid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenUid != null) localVarPathParams.Add("tokenUid", this.Configuration.ApiClient.ParameterToString(tokenUid)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LookupToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Token>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Token) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Token)));
        }

        /// <summary>
        /// Lookup an authorization token Lookup a token that can be used to authorize a charge 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenUid"></param>
        /// <returns>Task of Token</returns>
        public async System.Threading.Tasks.Task<Token> LookupTokenAsync (string tokenUid)
        {
             ApiResponse<Token> localVarResponse = await LookupTokenAsyncWithHttpInfo(tokenUid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lookup an authorization token Lookup a token that can be used to authorize a charge 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenUid"></param>
        /// <returns>Task of ApiResponse (Token)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Token>> LookupTokenAsyncWithHttpInfo (string tokenUid)
        {
            // verify the required parameter 'tokenUid' is set
            if (tokenUid == null)
                throw new ApiException(400, "Missing required parameter 'tokenUid' when calling DefaultApi->LookupToken");

            var localVarPath = "/token/{tokenUid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenUid != null) localVarPathParams.Add("tokenUid", this.Configuration.ApiClient.ParameterToString(tokenUid)); // path parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LookupToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Token>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Token) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Token)));
        }

        /// <summary>
        /// Reconfigure the charge station Supplies new configuration that should be applied to the charge station. This is not intended to be used as a general charge station provisioning mechanism, it is intended for one time changes required during testing. After reconfiguration, the charge station will be rebooted so the new configuration can take effect if instructed to. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns></returns>
        public void ReconfigureChargeStation (Dictionary<string, string> body, string csId)
        {
             ReconfigureChargeStationWithHttpInfo(body, csId);
        }

        /// <summary>
        /// Reconfigure the charge station Supplies new configuration that should be applied to the charge station. This is not intended to be used as a general charge station provisioning mechanism, it is intended for one time changes required during testing. After reconfiguration, the charge station will be rebooted so the new configuration can take effect if instructed to. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ReconfigureChargeStationWithHttpInfo (Dictionary<string, string> body, string csId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ReconfigureChargeStation");
            // verify the required parameter 'csId' is set
            if (csId == null)
                throw new ApiException(400, "Missing required parameter 'csId' when calling DefaultApi->ReconfigureChargeStation");

            var localVarPath = "/cs/{csId}/reconfigure";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (csId != null) localVarPathParams.Add("csId", this.Configuration.ApiClient.ParameterToString(csId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReconfigureChargeStation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reconfigure the charge station Supplies new configuration that should be applied to the charge station. This is not intended to be used as a general charge station provisioning mechanism, it is intended for one time changes required during testing. After reconfiguration, the charge station will be rebooted so the new configuration can take effect if instructed to. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ReconfigureChargeStationAsync (Dictionary<string, string> body, string csId)
        {
             await ReconfigureChargeStationAsyncWithHttpInfo(body, csId);

        }

        /// <summary>
        /// Reconfigure the charge station Supplies new configuration that should be applied to the charge station. This is not intended to be used as a general charge station provisioning mechanism, it is intended for one time changes required during testing. After reconfiguration, the charge station will be rebooted so the new configuration can take effect if instructed to. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ReconfigureChargeStationAsyncWithHttpInfo (Dictionary<string, string> body, string csId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ReconfigureChargeStation");
            // verify the required parameter 'csId' is set
            if (csId == null)
                throw new ApiException(400, "Missing required parameter 'csId' when calling DefaultApi->ReconfigureChargeStation");

            var localVarPath = "/cs/{csId}/reconfigure";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (csId != null) localVarPathParams.Add("csId", this.Configuration.ApiClient.ParameterToString(csId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReconfigureChargeStation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Register a new charge station Registers a new charge station. The system will assume that the charge station has not yet been provisioned and will place the charge station into a pending state so it can been configured when it sends a boot notification. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns></returns>
        public void RegisterChargeStation (ChargeStationAuth body, string csId)
        {
             RegisterChargeStationWithHttpInfo(body, csId);
        }

        /// <summary>
        /// Register a new charge station Registers a new charge station. The system will assume that the charge station has not yet been provisioned and will place the charge station into a pending state so it can been configured when it sends a boot notification. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RegisterChargeStationWithHttpInfo (ChargeStationAuth body, string csId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->RegisterChargeStation");
            // verify the required parameter 'csId' is set
            if (csId == null)
                throw new ApiException(400, "Missing required parameter 'csId' when calling DefaultApi->RegisterChargeStation");

            var localVarPath = "/cs/{csId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (csId != null) localVarPathParams.Add("csId", this.Configuration.ApiClient.ParameterToString(csId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterChargeStation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Register a new charge station Registers a new charge station. The system will assume that the charge station has not yet been provisioned and will place the charge station into a pending state so it can been configured when it sends a boot notification. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RegisterChargeStationAsync (ChargeStationAuth body, string csId)
        {
             await RegisterChargeStationAsyncWithHttpInfo(body, csId);

        }

        /// <summary>
        /// Register a new charge station Registers a new charge station. The system will assume that the charge station has not yet been provisioned and will place the charge station into a pending state so it can been configured when it sends a boot notification. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RegisterChargeStationAsyncWithHttpInfo (ChargeStationAuth body, string csId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->RegisterChargeStation");
            // verify the required parameter 'csId' is set
            if (csId == null)
                throw new ApiException(400, "Missing required parameter 'csId' when calling DefaultApi->RegisterChargeStation");

            var localVarPath = "/cs/{csId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (csId != null) localVarPathParams.Add("csId", this.Configuration.ApiClient.ParameterToString(csId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterChargeStation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Registers a location with the CSMS Registers a location with the CSMS. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="locationId">The location identifier</param>
        /// <returns></returns>
        public void RegisterLocation (Location body, string locationId)
        {
             RegisterLocationWithHttpInfo(body, locationId);
        }

        /// <summary>
        /// Registers a location with the CSMS Registers a location with the CSMS. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="locationId">The location identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RegisterLocationWithHttpInfo (Location body, string locationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->RegisterLocation");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling DefaultApi->RegisterLocation");

            var localVarPath = "/location/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Registers a location with the CSMS Registers a location with the CSMS. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="locationId">The location identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RegisterLocationAsync (Location body, string locationId)
        {
             await RegisterLocationAsyncWithHttpInfo(body, locationId);

        }

        /// <summary>
        /// Registers a location with the CSMS Registers a location with the CSMS. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="locationId">The location identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RegisterLocationAsyncWithHttpInfo (Location body, string locationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->RegisterLocation");
            // verify the required parameter 'locationId' is set
            if (locationId == null)
                throw new ApiException(400, "Missing required parameter 'locationId' when calling DefaultApi->RegisterLocation");

            var localVarPath = "/location/{locationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (locationId != null) localVarPathParams.Add("locationId", this.Configuration.ApiClient.ParameterToString(locationId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Registers an OCPI party with the CSMS Registers an OCPI party with the CSMS. Depending on the configuration provided the CSMS will either initiate a registration with the party or the party will wait for the party to initiate  a registration with the CSMS. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void RegisterParty (Registration body)
        {
             RegisterPartyWithHttpInfo(body);
        }

        /// <summary>
        /// Registers an OCPI party with the CSMS Registers an OCPI party with the CSMS. Depending on the configuration provided the CSMS will either initiate a registration with the party or the party will wait for the party to initiate  a registration with the CSMS. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RegisterPartyWithHttpInfo (Registration body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->RegisterParty");

            var localVarPath = "/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Registers an OCPI party with the CSMS Registers an OCPI party with the CSMS. Depending on the configuration provided the CSMS will either initiate a registration with the party or the party will wait for the party to initiate  a registration with the CSMS. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RegisterPartyAsync (Registration body)
        {
             await RegisterPartyAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Registers an OCPI party with the CSMS Registers an OCPI party with the CSMS. Depending on the configuration provided the CSMS will either initiate a registration with the party or the party will wait for the party to initiate  a registration with the CSMS. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RegisterPartyAsyncWithHttpInfo (Registration body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->RegisterParty");

            var localVarPath = "/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterParty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create/update an authorization token Creates or updates a token that can be used to authorize a charge 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void SetToken (Token body)
        {
             SetTokenWithHttpInfo(body);
        }

        /// <summary>
        /// Create/update an authorization token Creates or updates a token that can be used to authorize a charge 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SetTokenWithHttpInfo (Token body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->SetToken");

            var localVarPath = "/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create/update an authorization token Creates or updates a token that can be used to authorize a charge 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetTokenAsync (Token body)
        {
             await SetTokenAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create/update an authorization token Creates or updates a token that can be used to authorize a charge 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SetTokenAsyncWithHttpInfo (Token body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->SetToken");

            var localVarPath = "/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns></returns>
        public void TriggerChargeStation (ChargeStationTrigger body, string csId)
        {
             TriggerChargeStationWithHttpInfo(body, csId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> TriggerChargeStationWithHttpInfo (ChargeStationTrigger body, string csId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->TriggerChargeStation");
            // verify the required parameter 'csId' is set
            if (csId == null)
                throw new ApiException(400, "Missing required parameter 'csId' when calling DefaultApi->TriggerChargeStation");

            var localVarPath = "/cs/{csId}/trigger";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (csId != null) localVarPathParams.Add("csId", this.Configuration.ApiClient.ParameterToString(csId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TriggerChargeStation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TriggerChargeStationAsync (ChargeStationTrigger body, string csId)
        {
             await TriggerChargeStationAsyncWithHttpInfo(body, csId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="csId">The charge station identifier</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TriggerChargeStationAsyncWithHttpInfo (ChargeStationTrigger body, string csId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->TriggerChargeStation");
            // verify the required parameter 'csId' is set
            if (csId == null)
                throw new ApiException(400, "Missing required parameter 'csId' when calling DefaultApi->TriggerChargeStation");

            var localVarPath = "/cs/{csId}/trigger";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (csId != null) localVarPathParams.Add("csId", this.Configuration.ApiClient.ParameterToString(csId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TriggerChargeStation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Upload a certificate Uploads a client certificate to the CSMS. The CSMS can use the certificate to authenticate the charge station using mutual TLS when the TLS operations are being offloaded to a load-balancer. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void UploadCertificate (Certificate body)
        {
             UploadCertificateWithHttpInfo(body);
        }

        /// <summary>
        /// Upload a certificate Uploads a client certificate to the CSMS. The CSMS can use the certificate to authenticate the charge station using mutual TLS when the TLS operations are being offloaded to a load-balancer. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UploadCertificateWithHttpInfo (Certificate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UploadCertificate");

            var localVarPath = "/certificate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Upload a certificate Uploads a client certificate to the CSMS. The CSMS can use the certificate to authenticate the charge station using mutual TLS when the TLS operations are being offloaded to a load-balancer. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadCertificateAsync (Certificate body)
        {
             await UploadCertificateAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Upload a certificate Uploads a client certificate to the CSMS. The CSMS can use the certificate to authenticate the charge station using mutual TLS when the TLS operations are being offloaded to a load-balancer. 
        /// </summary>
        /// <exception cref="ocpp.maeve.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UploadCertificateAsyncWithHttpInfo (Certificate body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->UploadCertificate");

            var localVarPath = "/certificate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadCertificate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}

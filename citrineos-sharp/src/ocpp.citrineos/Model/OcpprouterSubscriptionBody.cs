/* 
 * CitrineOS Central System API
 *
 * Central System API for OCPP 2.0.1 messaging.
 *
 * OpenAPI spec version: 1.4.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ocpp.citrineos.Client.SwaggerDateConverter;
namespace ocpp.citrineos.Model
{
    /// <summary>
    /// OcpprouterSubscriptionBody
    /// </summary>
    [DataContract]
        public partial class OcpprouterSubscriptionBody :  IEquatable<OcpprouterSubscriptionBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OcpprouterSubscriptionBody" /> class.
        /// </summary>
        /// <param name="stationId">stationId (required).</param>
        /// <param name="onConnect">onConnect.</param>
        /// <param name="onClose">onClose.</param>
        /// <param name="onMessage">onMessage.</param>
        /// <param name="sentMessage">sentMessage.</param>
        /// <param name="messageRegexFilter">messageRegexFilter.</param>
        /// <param name="url">url (required).</param>
        public OcpprouterSubscriptionBody(string stationId = default(string), bool? onConnect = default(bool?), bool? onClose = default(bool?), bool? onMessage = default(bool?), bool? sentMessage = default(bool?), string messageRegexFilter = default(string), string url = default(string))
        {
            // to ensure "stationId" is required (not null)
            if (stationId == null)
            {
                throw new InvalidDataException("stationId is a required property for OcpprouterSubscriptionBody and cannot be null");
            }
            else
            {
                this.StationId = stationId;
            }
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for OcpprouterSubscriptionBody and cannot be null");
            }
            else
            {
                this.Url = url;
            }
            this.OnConnect = onConnect;
            this.OnClose = onClose;
            this.OnMessage = onMessage;
            this.SentMessage = sentMessage;
            this.MessageRegexFilter = messageRegexFilter;
        }
        
        /// <summary>
        /// Gets or Sets StationId
        /// </summary>
        [DataMember(Name="stationId", EmitDefaultValue=false)]
        public string StationId { get; set; }

        /// <summary>
        /// Gets or Sets OnConnect
        /// </summary>
        [DataMember(Name="onConnect", EmitDefaultValue=false)]
        public bool? OnConnect { get; set; }

        /// <summary>
        /// Gets or Sets OnClose
        /// </summary>
        [DataMember(Name="onClose", EmitDefaultValue=false)]
        public bool? OnClose { get; set; }

        /// <summary>
        /// Gets or Sets OnMessage
        /// </summary>
        [DataMember(Name="onMessage", EmitDefaultValue=false)]
        public bool? OnMessage { get; set; }

        /// <summary>
        /// Gets or Sets SentMessage
        /// </summary>
        [DataMember(Name="sentMessage", EmitDefaultValue=false)]
        public bool? SentMessage { get; set; }

        /// <summary>
        /// Gets or Sets MessageRegexFilter
        /// </summary>
        [DataMember(Name="messageRegexFilter", EmitDefaultValue=false)]
        public string MessageRegexFilter { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OcpprouterSubscriptionBody {\n");
            sb.Append("  StationId: ").Append(StationId).Append("\n");
            sb.Append("  OnConnect: ").Append(OnConnect).Append("\n");
            sb.Append("  OnClose: ").Append(OnClose).Append("\n");
            sb.Append("  OnMessage: ").Append(OnMessage).Append("\n");
            sb.Append("  SentMessage: ").Append(SentMessage).Append("\n");
            sb.Append("  MessageRegexFilter: ").Append(MessageRegexFilter).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OcpprouterSubscriptionBody);
        }

        /// <summary>
        /// Returns true if OcpprouterSubscriptionBody instances are equal
        /// </summary>
        /// <param name="input">Instance of OcpprouterSubscriptionBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OcpprouterSubscriptionBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StationId == input.StationId ||
                    (this.StationId != null &&
                    this.StationId.Equals(input.StationId))
                ) && 
                (
                    this.OnConnect == input.OnConnect ||
                    (this.OnConnect != null &&
                    this.OnConnect.Equals(input.OnConnect))
                ) && 
                (
                    this.OnClose == input.OnClose ||
                    (this.OnClose != null &&
                    this.OnClose.Equals(input.OnClose))
                ) && 
                (
                    this.OnMessage == input.OnMessage ||
                    (this.OnMessage != null &&
                    this.OnMessage.Equals(input.OnMessage))
                ) && 
                (
                    this.SentMessage == input.SentMessage ||
                    (this.SentMessage != null &&
                    this.SentMessage.Equals(input.SentMessage))
                ) && 
                (
                    this.MessageRegexFilter == input.MessageRegexFilter ||
                    (this.MessageRegexFilter != null &&
                    this.MessageRegexFilter.Equals(input.MessageRegexFilter))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StationId != null)
                    hashCode = hashCode * 59 + this.StationId.GetHashCode();
                if (this.OnConnect != null)
                    hashCode = hashCode * 59 + this.OnConnect.GetHashCode();
                if (this.OnClose != null)
                    hashCode = hashCode * 59 + this.OnClose.GetHashCode();
                if (this.OnMessage != null)
                    hashCode = hashCode * 59 + this.OnMessage.GetHashCode();
                if (this.SentMessage != null)
                    hashCode = hashCode * 59 + this.SentMessage.GetHashCode();
                if (this.MessageRegexFilter != null)
                    hashCode = hashCode * 59 + this.MessageRegexFilter.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

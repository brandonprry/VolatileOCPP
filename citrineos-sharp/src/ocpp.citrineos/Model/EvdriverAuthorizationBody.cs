/* 
 * CitrineOS Central System API
 *
 * Central System API for OCPP 2.0.1 messaging.
 *
 * OpenAPI spec version: 1.4.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ocpp.citrineos.Client.SwaggerDateConverter;
namespace ocpp.citrineos.Model
{
    /// <summary>
    /// EvdriverAuthorizationBody
    /// </summary>
    [DataContract]
        public partial class EvdriverAuthorizationBody :  IEquatable<EvdriverAuthorizationBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EvdriverAuthorizationBody" /> class.
        /// </summary>
        /// <param name="idToken">idToken (required).</param>
        /// <param name="idTokenInfo">idTokenInfo.</param>
        public EvdriverAuthorizationBody(IdTokenType idToken = default(IdTokenType), IdTokenInfoType idTokenInfo = default(IdTokenInfoType))
        {
            // to ensure "idToken" is required (not null)
            if (idToken == null)
            {
                throw new InvalidDataException("idToken is a required property for EvdriverAuthorizationBody and cannot be null");
            }
            else
            {
                this.IdToken = idToken;
            }
            this.IdTokenInfo = idTokenInfo;
        }
        
        /// <summary>
        /// Gets or Sets IdToken
        /// </summary>
        [DataMember(Name="idToken", EmitDefaultValue=false)]
        public IdTokenType IdToken { get; set; }

        /// <summary>
        /// Gets or Sets IdTokenInfo
        /// </summary>
        [DataMember(Name="idTokenInfo", EmitDefaultValue=false)]
        public IdTokenInfoType IdTokenInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EvdriverAuthorizationBody {\n");
            sb.Append("  IdToken: ").Append(IdToken).Append("\n");
            sb.Append("  IdTokenInfo: ").Append(IdTokenInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EvdriverAuthorizationBody);
        }

        /// <summary>
        /// Returns true if EvdriverAuthorizationBody instances are equal
        /// </summary>
        /// <param name="input">Instance of EvdriverAuthorizationBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EvdriverAuthorizationBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IdToken == input.IdToken ||
                    (this.IdToken != null &&
                    this.IdToken.Equals(input.IdToken))
                ) && 
                (
                    this.IdTokenInfo == input.IdTokenInfo ||
                    (this.IdTokenInfo != null &&
                    this.IdTokenInfo.Equals(input.IdTokenInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdToken != null)
                    hashCode = hashCode * 59 + this.IdToken.GetHashCode();
                if (this.IdTokenInfo != null)
                    hashCode = hashCode * 59 + this.IdTokenInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

/* 
 * CitrineOS Central System API
 *
 * Central System API for OCPP 2.0.1 messaging.
 *
 * OpenAPI spec version: 1.4.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ocpp.citrineos.Client.SwaggerDateConverter;
namespace ocpp.citrineos.Model
{
    /// <summary>
    /// CertificatesRootCertificateBody
    /// </summary>
    [DataContract]
        public partial class CertificatesRootCertificateBody :  IEquatable<CertificatesRootCertificateBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificatesRootCertificateBody" /> class.
        /// </summary>
        /// <param name="stationId">stationId (required).</param>
        /// <param name="certificateType">certificateType (required).</param>
        /// <param name="tenantId">tenantId (required).</param>
        /// <param name="callbackUrl">callbackUrl.</param>
        /// <param name="fileId">fileId.</param>
        public CertificatesRootCertificateBody(string stationId = default(string), string certificateType = default(string), string tenantId = default(string), string callbackUrl = default(string), string fileId = default(string))
        {
            // to ensure "stationId" is required (not null)
            if (stationId == null)
            {
                throw new InvalidDataException("stationId is a required property for CertificatesRootCertificateBody and cannot be null");
            }
            else
            {
                this.StationId = stationId;
            }
            // to ensure "certificateType" is required (not null)
            if (certificateType == null)
            {
                throw new InvalidDataException("certificateType is a required property for CertificatesRootCertificateBody and cannot be null");
            }
            else
            {
                this.CertificateType = certificateType;
            }
            // to ensure "tenantId" is required (not null)
            if (tenantId == null)
            {
                throw new InvalidDataException("tenantId is a required property for CertificatesRootCertificateBody and cannot be null");
            }
            else
            {
                this.TenantId = tenantId;
            }
            this.CallbackUrl = callbackUrl;
            this.FileId = fileId;
        }
        
        /// <summary>
        /// Gets or Sets StationId
        /// </summary>
        [DataMember(Name="stationId", EmitDefaultValue=false)]
        public string StationId { get; set; }

        /// <summary>
        /// Gets or Sets CertificateType
        /// </summary>
        [DataMember(Name="certificateType", EmitDefaultValue=false)]
        public string CertificateType { get; set; }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name="tenantId", EmitDefaultValue=false)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets CallbackUrl
        /// </summary>
        [DataMember(Name="callbackUrl", EmitDefaultValue=false)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Gets or Sets FileId
        /// </summary>
        [DataMember(Name="fileId", EmitDefaultValue=false)]
        public string FileId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CertificatesRootCertificateBody {\n");
            sb.Append("  StationId: ").Append(StationId).Append("\n");
            sb.Append("  CertificateType: ").Append(CertificateType).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificatesRootCertificateBody);
        }

        /// <summary>
        /// Returns true if CertificatesRootCertificateBody instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificatesRootCertificateBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificatesRootCertificateBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StationId == input.StationId ||
                    (this.StationId != null &&
                    this.StationId.Equals(input.StationId))
                ) && 
                (
                    this.CertificateType == input.CertificateType ||
                    (this.CertificateType != null &&
                    this.CertificateType.Equals(input.CertificateType))
                ) && 
                (
                    this.TenantId == input.TenantId ||
                    (this.TenantId != null &&
                    this.TenantId.Equals(input.TenantId))
                ) && 
                (
                    this.CallbackUrl == input.CallbackUrl ||
                    (this.CallbackUrl != null &&
                    this.CallbackUrl.Equals(input.CallbackUrl))
                ) && 
                (
                    this.FileId == input.FileId ||
                    (this.FileId != null &&
                    this.FileId.Equals(input.FileId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StationId != null)
                    hashCode = hashCode * 59 + this.StationId.GetHashCode();
                if (this.CertificateType != null)
                    hashCode = hashCode * 59 + this.CertificateType.GetHashCode();
                if (this.TenantId != null)
                    hashCode = hashCode * 59 + this.TenantId.GetHashCode();
                if (this.CallbackUrl != null)
                    hashCode = hashCode * 59 + this.CallbackUrl.GetHashCode();
                if (this.FileId != null)
                    hashCode = hashCode * 59 + this.FileId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

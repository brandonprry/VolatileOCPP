/* 
 * CitrineOS Central System API
 *
 * Central System API for OCPP 2.0.1 messaging.
 *
 * OpenAPI spec version: 1.4.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using ocpp.citrineos.Client;
using ocpp.citrineos.Api;
using ocpp.citrineos.Model;

namespace ocpp.citrineos.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        /// <summary>
        /// Test DataCertificatesCertificateChainPost
        /// </summary>
        [Test]
        public void DataCertificatesCertificateChainPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CertificatesCertificateChainBody body = null;
            //instance.DataCertificatesCertificateChainPost(body);
            
        }
        /// <summary>
        /// Test DataCertificatesRootCertificatePut
        /// </summary>
        [Test]
        public void DataCertificatesRootCertificatePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CertificatesRootCertificateBody body = null;
            //instance.DataCertificatesRootCertificatePut(body);
            
        }
        /// <summary>
        /// Test DataCertificatesTlsCertificatesPut
        /// </summary>
        [Test]
        public void DataCertificatesTlsCertificatesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CertificatesTlsCertificatesBody body = null;
            //string id = null;
            //instance.DataCertificatesTlsCertificatesPut(body, id);
            
        }
        /// <summary>
        /// Test DataConfigurationBootDelete
        /// </summary>
        [Test]
        public void DataConfigurationBootDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stationId = null;
            //instance.DataConfigurationBootDelete(stationId);
            
        }
        /// <summary>
        /// Test DataConfigurationBootGet
        /// </summary>
        [Test]
        public void DataConfigurationBootGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stationId = null;
            //instance.DataConfigurationBootGet(stationId);
            
        }
        /// <summary>
        /// Test DataConfigurationBootPut
        /// </summary>
        [Test]
        public void DataConfigurationBootPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ConfigurationBootBody body = null;
            //string stationId = null;
            //instance.DataConfigurationBootPut(body, stationId);
            
        }
        /// <summary>
        /// Test DataConfigurationPasswordPost
        /// </summary>
        [Test]
        public void DataConfigurationPasswordPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ConfigurationPasswordBody body = null;
            //string callbackUrl = null;
            //instance.DataConfigurationPasswordPost(body, callbackUrl);
            
        }
        /// <summary>
        /// Test DataEvdriverAuthorizationDelete
        /// </summary>
        [Test]
        public void DataEvdriverAuthorizationDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idToken = null;
            //string type = null;
            //instance.DataEvdriverAuthorizationDelete(idToken, type);
            
        }
        /// <summary>
        /// Test DataEvdriverAuthorizationGet
        /// </summary>
        [Test]
        public void DataEvdriverAuthorizationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idToken = null;
            //string type = null;
            //instance.DataEvdriverAuthorizationGet(idToken, type);
            
        }
        /// <summary>
        /// Test DataEvdriverAuthorizationPut
        /// </summary>
        [Test]
        public void DataEvdriverAuthorizationPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EvdriverAuthorizationBody body = null;
            //string idToken = null;
            //string type = null;
            //instance.DataEvdriverAuthorizationPut(body, idToken, type);
            
        }
        /// <summary>
        /// Test DataEvdriverAuthorizationRestrictionsPut
        /// </summary>
        [Test]
        public void DataEvdriverAuthorizationRestrictionsPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string idToken = null;
            //string type = null;
            //EvdriverAuthorizationRestrictionsBody body = null;
            //instance.DataEvdriverAuthorizationRestrictionsPut(idToken, type, body);
            
        }
        /// <summary>
        /// Test DataEvdriverLocalListVersionGet
        /// </summary>
        [Test]
        public void DataEvdriverLocalListVersionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stationId = null;
            //instance.DataEvdriverLocalListVersionGet(stationId);
            
        }
        /// <summary>
        /// Test DataMonitoringVariableAttributeDelete
        /// </summary>
        [Test]
        public void DataMonitoringVariableAttributeDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stationId = null;
            //string type = null;
            //string value = null;
            //string status = null;
            //decimal? componentEvseId = null;
            //decimal? componentEvseConnectorId = null;
            //string componentName = null;
            //string componentInstance = null;
            //string variableName = null;
            //string variableInstance = null;
            //instance.DataMonitoringVariableAttributeDelete(stationId, type, value, status, componentEvseId, componentEvseConnectorId, componentName, componentInstance, variableName, variableInstance);
            
        }
        /// <summary>
        /// Test DataMonitoringVariableAttributeGet
        /// </summary>
        [Test]
        public void DataMonitoringVariableAttributeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stationId = null;
            //string type = null;
            //string value = null;
            //string status = null;
            //decimal? componentEvseId = null;
            //decimal? componentEvseConnectorId = null;
            //string componentName = null;
            //string componentInstance = null;
            //string variableName = null;
            //string variableInstance = null;
            //instance.DataMonitoringVariableAttributeGet(stationId, type, value, status, componentEvseId, componentEvseConnectorId, componentName, componentInstance, variableName, variableInstance);
            
        }
        /// <summary>
        /// Test DataMonitoringVariableAttributePut
        /// </summary>
        [Test]
        public void DataMonitoringVariableAttributePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MonitoringVariableAttributeBody body = null;
            //string stationId = null;
            //bool? setOnCharger = null;
            //instance.DataMonitoringVariableAttributePut(body, stationId, setOnCharger);
            
        }
        /// <summary>
        /// Test DataOcpprouterSubscriptionDelete
        /// </summary>
        [Test]
        public void DataOcpprouterSubscriptionDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //decimal? id = null;
            //instance.DataOcpprouterSubscriptionDelete(id);
            
        }
        /// <summary>
        /// Test DataOcpprouterSubscriptionGet
        /// </summary>
        [Test]
        public void DataOcpprouterSubscriptionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stationId = null;
            //instance.DataOcpprouterSubscriptionGet(stationId);
            
        }
        /// <summary>
        /// Test DataOcpprouterSubscriptionPost
        /// </summary>
        [Test]
        public void DataOcpprouterSubscriptionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OcpprouterSubscriptionBody body = null;
            //instance.DataOcpprouterSubscriptionPost(body);
            
        }
        /// <summary>
        /// Test DataTransactionsTariffDelete
        /// </summary>
        [Test]
        public void DataTransactionsTariffDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DataTransactionsTariffDelete(id);
            
        }
        /// <summary>
        /// Test DataTransactionsTariffGet
        /// </summary>
        [Test]
        public void DataTransactionsTariffGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.DataTransactionsTariffGet(id);
            
        }
        /// <summary>
        /// Test DataTransactionsTariffPut
        /// </summary>
        [Test]
        public void DataTransactionsTariffPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionsTariffBody body = null;
            //instance.DataTransactionsTariffPut(body);
            
        }
        /// <summary>
        /// Test DataTransactionsTransactionGet
        /// </summary>
        [Test]
        public void DataTransactionsTransactionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string stationId = null;
            //string transactionId = null;
            //instance.DataTransactionsTransactionGet(stationId, transactionId);
            
        }
    }

}

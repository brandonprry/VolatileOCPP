/* 
 * CitrineOS Central System API
 *
 * Central System API for OCPP 2.0.1 messaging.
 *
 * OpenAPI spec version: 1.4.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ocpp.citrineos.Client.SwaggerDateConverter;
namespace ocpp.citrineos.Model
{
    /// <summary>
    /// ReportingGetBaseReportBody
    /// </summary>
    [DataContract]
        public partial class ReportingGetBaseReportBody :  IEquatable<ReportingGetBaseReportBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingGetBaseReportBody" /> class.
        /// </summary>
        /// <param name="customData">customData.</param>
        /// <param name="requestId">The Id of the request.   (required).</param>
        /// <param name="reportBase">reportBase (required).</param>
        public ReportingGetBaseReportBody(CustomDataType customData = default(CustomDataType), int? requestId = default(int?), ReportBaseEnumType reportBase = default(ReportBaseEnumType))
        {
            // to ensure "requestId" is required (not null)
            if (requestId == null)
            {
                throw new InvalidDataException("requestId is a required property for ReportingGetBaseReportBody and cannot be null");
            }
            else
            {
                this.RequestId = requestId;
            }
            // to ensure "reportBase" is required (not null)
            if (reportBase == null)
            {
                throw new InvalidDataException("reportBase is a required property for ReportingGetBaseReportBody and cannot be null");
            }
            else
            {
                this.ReportBase = reportBase;
            }
            this.CustomData = customData;
        }
        
        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public CustomDataType CustomData { get; set; }

        /// <summary>
        /// The Id of the request.  
        /// </summary>
        /// <value>The Id of the request.  </value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public int? RequestId { get; set; }

        /// <summary>
        /// Gets or Sets ReportBase
        /// </summary>
        [DataMember(Name="reportBase", EmitDefaultValue=false)]
        public ReportBaseEnumType ReportBase { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportingGetBaseReportBody {\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  ReportBase: ").Append(ReportBase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportingGetBaseReportBody);
        }

        /// <summary>
        /// Returns true if ReportingGetBaseReportBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportingGetBaseReportBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportingGetBaseReportBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomData == input.CustomData ||
                    (this.CustomData != null &&
                    this.CustomData.Equals(input.CustomData))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.ReportBase == input.ReportBase ||
                    (this.ReportBase != null &&
                    this.ReportBase.Equals(input.ReportBase))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomData != null)
                    hashCode = hashCode * 59 + this.CustomData.GetHashCode();
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.ReportBase != null)
                    hashCode = hashCode * 59 + this.ReportBase.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

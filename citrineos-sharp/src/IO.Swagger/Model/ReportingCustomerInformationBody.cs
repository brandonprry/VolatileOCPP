/* 
 * CitrineOS Central System API
 *
 * Central System API for OCPP 2.0.1 messaging.
 *
 * OpenAPI spec version: 1.4.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ocpp.citrineos.Client.SwaggerDateConverter;
namespace ocpp.citrineos.Model
{
    /// <summary>
    /// ReportingCustomerInformationBody
    /// </summary>
    [DataContract]
        public partial class ReportingCustomerInformationBody :  IEquatable<ReportingCustomerInformationBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingCustomerInformationBody" /> class.
        /// </summary>
        /// <param name="customData">customData.</param>
        /// <param name="customerCertificate">customerCertificate.</param>
        /// <param name="idToken">idToken.</param>
        /// <param name="requestId">The Id of the request.     (required).</param>
        /// <param name="report">Flag indicating whether the Charging Station should return NotifyCustomerInformationRequest messages containing information about the customer referred to.   (required).</param>
        /// <param name="clear">Flag indicating whether the Charging Station should clear all information about the customer referred to.   (required).</param>
        /// <param name="customerIdentifier">A (e.g. vendor specific) identifier of the customer this request refers to. This field contains a custom identifier other than IdToken and Certificate.  One of the possible identifiers (customerIdentifier, customerIdToken or customerCertificate) should be in the request message.  .</param>
        public ReportingCustomerInformationBody(CustomDataType customData = default(CustomDataType), CertificateHashDataType customerCertificate = default(CertificateHashDataType), IdTokenType idToken = default(IdTokenType), int? requestId = default(int?), bool? report = default(bool?), bool? clear = default(bool?), string customerIdentifier = default(string))
        {
            // to ensure "requestId" is required (not null)
            if (requestId == null)
            {
                throw new InvalidDataException("requestId is a required property for ReportingCustomerInformationBody and cannot be null");
            }
            else
            {
                this.RequestId = requestId;
            }
            // to ensure "report" is required (not null)
            if (report == null)
            {
                throw new InvalidDataException("report is a required property for ReportingCustomerInformationBody and cannot be null");
            }
            else
            {
                this.Report = report;
            }
            // to ensure "clear" is required (not null)
            if (clear == null)
            {
                throw new InvalidDataException("clear is a required property for ReportingCustomerInformationBody and cannot be null");
            }
            else
            {
                this.Clear = clear;
            }
            this.CustomData = customData;
            this.CustomerCertificate = customerCertificate;
            this.IdToken = idToken;
            this.CustomerIdentifier = customerIdentifier;
        }
        
        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public CustomDataType CustomData { get; set; }

        /// <summary>
        /// Gets or Sets CustomerCertificate
        /// </summary>
        [DataMember(Name="customerCertificate", EmitDefaultValue=false)]
        public CertificateHashDataType CustomerCertificate { get; set; }

        /// <summary>
        /// Gets or Sets IdToken
        /// </summary>
        [DataMember(Name="idToken", EmitDefaultValue=false)]
        public IdTokenType IdToken { get; set; }

        /// <summary>
        /// The Id of the request.    
        /// </summary>
        /// <value>The Id of the request.    </value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public int? RequestId { get; set; }

        /// <summary>
        /// Flag indicating whether the Charging Station should return NotifyCustomerInformationRequest messages containing information about the customer referred to.  
        /// </summary>
        /// <value>Flag indicating whether the Charging Station should return NotifyCustomerInformationRequest messages containing information about the customer referred to.  </value>
        [DataMember(Name="report", EmitDefaultValue=false)]
        public bool? Report { get; set; }

        /// <summary>
        /// Flag indicating whether the Charging Station should clear all information about the customer referred to.  
        /// </summary>
        /// <value>Flag indicating whether the Charging Station should clear all information about the customer referred to.  </value>
        [DataMember(Name="clear", EmitDefaultValue=false)]
        public bool? Clear { get; set; }

        /// <summary>
        /// A (e.g. vendor specific) identifier of the customer this request refers to. This field contains a custom identifier other than IdToken and Certificate.  One of the possible identifiers (customerIdentifier, customerIdToken or customerCertificate) should be in the request message.  
        /// </summary>
        /// <value>A (e.g. vendor specific) identifier of the customer this request refers to. This field contains a custom identifier other than IdToken and Certificate.  One of the possible identifiers (customerIdentifier, customerIdToken or customerCertificate) should be in the request message.  </value>
        [DataMember(Name="customerIdentifier", EmitDefaultValue=false)]
        public string CustomerIdentifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportingCustomerInformationBody {\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("  CustomerCertificate: ").Append(CustomerCertificate).Append("\n");
            sb.Append("  IdToken: ").Append(IdToken).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  Report: ").Append(Report).Append("\n");
            sb.Append("  Clear: ").Append(Clear).Append("\n");
            sb.Append("  CustomerIdentifier: ").Append(CustomerIdentifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportingCustomerInformationBody);
        }

        /// <summary>
        /// Returns true if ReportingCustomerInformationBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportingCustomerInformationBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportingCustomerInformationBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomData == input.CustomData ||
                    (this.CustomData != null &&
                    this.CustomData.Equals(input.CustomData))
                ) && 
                (
                    this.CustomerCertificate == input.CustomerCertificate ||
                    (this.CustomerCertificate != null &&
                    this.CustomerCertificate.Equals(input.CustomerCertificate))
                ) && 
                (
                    this.IdToken == input.IdToken ||
                    (this.IdToken != null &&
                    this.IdToken.Equals(input.IdToken))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.Report == input.Report ||
                    (this.Report != null &&
                    this.Report.Equals(input.Report))
                ) && 
                (
                    this.Clear == input.Clear ||
                    (this.Clear != null &&
                    this.Clear.Equals(input.Clear))
                ) && 
                (
                    this.CustomerIdentifier == input.CustomerIdentifier ||
                    (this.CustomerIdentifier != null &&
                    this.CustomerIdentifier.Equals(input.CustomerIdentifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomData != null)
                    hashCode = hashCode * 59 + this.CustomData.GetHashCode();
                if (this.CustomerCertificate != null)
                    hashCode = hashCode * 59 + this.CustomerCertificate.GetHashCode();
                if (this.IdToken != null)
                    hashCode = hashCode * 59 + this.IdToken.GetHashCode();
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.Report != null)
                    hashCode = hashCode * 59 + this.Report.GetHashCode();
                if (this.Clear != null)
                    hashCode = hashCode * 59 + this.Clear.GetHashCode();
                if (this.CustomerIdentifier != null)
                    hashCode = hashCode * 59 + this.CustomerIdentifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

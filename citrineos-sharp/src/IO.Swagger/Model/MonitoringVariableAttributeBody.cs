/* 
 * CitrineOS Central System API
 *
 * Central System API for OCPP 2.0.1 messaging.
 *
 * OpenAPI spec version: 1.4.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// MonitoringVariableAttributeBody
    /// </summary>
    [DataContract]
        public partial class MonitoringVariableAttributeBody :  IEquatable<MonitoringVariableAttributeBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoringVariableAttributeBody" /> class.
        /// </summary>
        /// <param name="component">component (required).</param>
        /// <param name="variable">variable (required).</param>
        /// <param name="variableAttribute">variableAttribute (required).</param>
        /// <param name="variableCharacteristics">variableCharacteristics.</param>
        public MonitoringVariableAttributeBody(ComponentType component = default(ComponentType), VariableType variable = default(VariableType), List<VariableAttributeType> variableAttribute = default(List<VariableAttributeType>), VariableCharacteristicsType variableCharacteristics = default(VariableCharacteristicsType))
        {
            // to ensure "component" is required (not null)
            if (component == null)
            {
                throw new InvalidDataException("component is a required property for MonitoringVariableAttributeBody and cannot be null");
            }
            else
            {
                this.Component = component;
            }
            // to ensure "variable" is required (not null)
            if (variable == null)
            {
                throw new InvalidDataException("variable is a required property for MonitoringVariableAttributeBody and cannot be null");
            }
            else
            {
                this.Variable = variable;
            }
            // to ensure "variableAttribute" is required (not null)
            if (variableAttribute == null)
            {
                throw new InvalidDataException("variableAttribute is a required property for MonitoringVariableAttributeBody and cannot be null");
            }
            else
            {
                this.VariableAttribute = variableAttribute;
            }
            this.VariableCharacteristics = variableCharacteristics;
        }
        
        /// <summary>
        /// Gets or Sets Component
        /// </summary>
        [DataMember(Name="component", EmitDefaultValue=false)]
        public ComponentType Component { get; set; }

        /// <summary>
        /// Gets or Sets Variable
        /// </summary>
        [DataMember(Name="variable", EmitDefaultValue=false)]
        public VariableType Variable { get; set; }

        /// <summary>
        /// Gets or Sets VariableAttribute
        /// </summary>
        [DataMember(Name="variableAttribute", EmitDefaultValue=false)]
        public List<VariableAttributeType> VariableAttribute { get; set; }

        /// <summary>
        /// Gets or Sets VariableCharacteristics
        /// </summary>
        [DataMember(Name="variableCharacteristics", EmitDefaultValue=false)]
        public VariableCharacteristicsType VariableCharacteristics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MonitoringVariableAttributeBody {\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  Variable: ").Append(Variable).Append("\n");
            sb.Append("  VariableAttribute: ").Append(VariableAttribute).Append("\n");
            sb.Append("  VariableCharacteristics: ").Append(VariableCharacteristics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MonitoringVariableAttributeBody);
        }

        /// <summary>
        /// Returns true if MonitoringVariableAttributeBody instances are equal
        /// </summary>
        /// <param name="input">Instance of MonitoringVariableAttributeBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MonitoringVariableAttributeBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Component == input.Component ||
                    (this.Component != null &&
                    this.Component.Equals(input.Component))
                ) && 
                (
                    this.Variable == input.Variable ||
                    (this.Variable != null &&
                    this.Variable.Equals(input.Variable))
                ) && 
                (
                    this.VariableAttribute == input.VariableAttribute ||
                    this.VariableAttribute != null &&
                    input.VariableAttribute != null &&
                    this.VariableAttribute.SequenceEqual(input.VariableAttribute)
                ) && 
                (
                    this.VariableCharacteristics == input.VariableCharacteristics ||
                    (this.VariableCharacteristics != null &&
                    this.VariableCharacteristics.Equals(input.VariableCharacteristics))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Component != null)
                    hashCode = hashCode * 59 + this.Component.GetHashCode();
                if (this.Variable != null)
                    hashCode = hashCode * 59 + this.Variable.GetHashCode();
                if (this.VariableAttribute != null)
                    hashCode = hashCode * 59 + this.VariableAttribute.GetHashCode();
                if (this.VariableCharacteristics != null)
                    hashCode = hashCode * 59 + this.VariableCharacteristics.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

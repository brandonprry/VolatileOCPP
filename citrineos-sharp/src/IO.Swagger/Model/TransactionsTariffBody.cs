/* 
 * CitrineOS Central System API
 *
 * Central System API for OCPP 2.0.1 messaging.
 *
 * OpenAPI spec version: 1.4.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ocpp.citrineos.Client.SwaggerDateConverter;
namespace ocpp.citrineos.Model
{
    /// <summary>
    /// TransactionsTariffBody
    /// </summary>
    [DataContract]
        public partial class TransactionsTariffBody :  IEquatable<TransactionsTariffBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsTariffBody" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="currency">currency (required).</param>
        /// <param name="pricePerKwh">pricePerKwh (required).</param>
        /// <param name="pricePerMin">pricePerMin.</param>
        /// <param name="pricePerSession">pricePerSession.</param>
        /// <param name="paymentFee">paymentFee.</param>
        /// <param name="authorizationAmount">authorizationAmount.</param>
        /// <param name="taxRate">taxRate.</param>
        public TransactionsTariffBody(decimal? id = default(decimal?), string currency = default(string), decimal? pricePerKwh = default(decimal?), decimal? pricePerMin = default(decimal?), decimal? pricePerSession = default(decimal?), decimal? paymentFee = default(decimal?), decimal? authorizationAmount = default(decimal?), decimal? taxRate = default(decimal?))
        {
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new InvalidDataException("currency is a required property for TransactionsTariffBody and cannot be null");
            }
            else
            {
                this.Currency = currency;
            }
            // to ensure "pricePerKwh" is required (not null)
            if (pricePerKwh == null)
            {
                throw new InvalidDataException("pricePerKwh is a required property for TransactionsTariffBody and cannot be null");
            }
            else
            {
                this.PricePerKwh = pricePerKwh;
            }
            this.Id = id;
            this.PricePerMin = pricePerMin;
            this.PricePerSession = pricePerSession;
            this.PaymentFee = paymentFee;
            this.AuthorizationAmount = authorizationAmount;
            this.TaxRate = taxRate;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public decimal? Id { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets PricePerKwh
        /// </summary>
        [DataMember(Name="pricePerKwh", EmitDefaultValue=false)]
        public decimal? PricePerKwh { get; set; }

        /// <summary>
        /// Gets or Sets PricePerMin
        /// </summary>
        [DataMember(Name="pricePerMin", EmitDefaultValue=false)]
        public decimal? PricePerMin { get; set; }

        /// <summary>
        /// Gets or Sets PricePerSession
        /// </summary>
        [DataMember(Name="pricePerSession", EmitDefaultValue=false)]
        public decimal? PricePerSession { get; set; }

        /// <summary>
        /// Gets or Sets PaymentFee
        /// </summary>
        [DataMember(Name="paymentFee", EmitDefaultValue=false)]
        public decimal? PaymentFee { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizationAmount
        /// </summary>
        [DataMember(Name="authorizationAmount", EmitDefaultValue=false)]
        public decimal? AuthorizationAmount { get; set; }

        /// <summary>
        /// Gets or Sets TaxRate
        /// </summary>
        [DataMember(Name="taxRate", EmitDefaultValue=false)]
        public decimal? TaxRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionsTariffBody {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  PricePerKwh: ").Append(PricePerKwh).Append("\n");
            sb.Append("  PricePerMin: ").Append(PricePerMin).Append("\n");
            sb.Append("  PricePerSession: ").Append(PricePerSession).Append("\n");
            sb.Append("  PaymentFee: ").Append(PaymentFee).Append("\n");
            sb.Append("  AuthorizationAmount: ").Append(AuthorizationAmount).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionsTariffBody);
        }

        /// <summary>
        /// Returns true if TransactionsTariffBody instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionsTariffBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionsTariffBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.PricePerKwh == input.PricePerKwh ||
                    (this.PricePerKwh != null &&
                    this.PricePerKwh.Equals(input.PricePerKwh))
                ) && 
                (
                    this.PricePerMin == input.PricePerMin ||
                    (this.PricePerMin != null &&
                    this.PricePerMin.Equals(input.PricePerMin))
                ) && 
                (
                    this.PricePerSession == input.PricePerSession ||
                    (this.PricePerSession != null &&
                    this.PricePerSession.Equals(input.PricePerSession))
                ) && 
                (
                    this.PaymentFee == input.PaymentFee ||
                    (this.PaymentFee != null &&
                    this.PaymentFee.Equals(input.PaymentFee))
                ) && 
                (
                    this.AuthorizationAmount == input.AuthorizationAmount ||
                    (this.AuthorizationAmount != null &&
                    this.AuthorizationAmount.Equals(input.AuthorizationAmount))
                ) && 
                (
                    this.TaxRate == input.TaxRate ||
                    (this.TaxRate != null &&
                    this.TaxRate.Equals(input.TaxRate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.PricePerKwh != null)
                    hashCode = hashCode * 59 + this.PricePerKwh.GetHashCode();
                if (this.PricePerMin != null)
                    hashCode = hashCode * 59 + this.PricePerMin.GetHashCode();
                if (this.PricePerSession != null)
                    hashCode = hashCode * 59 + this.PricePerSession.GetHashCode();
                if (this.PaymentFee != null)
                    hashCode = hashCode * 59 + this.PaymentFee.GetHashCode();
                if (this.AuthorizationAmount != null)
                    hashCode = hashCode * 59 + this.AuthorizationAmount.GetHashCode();
                if (this.TaxRate != null)
                    hashCode = hashCode * 59 + this.TaxRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

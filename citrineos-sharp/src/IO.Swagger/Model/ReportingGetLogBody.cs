/* 
 * CitrineOS Central System API
 *
 * Central System API for OCPP 2.0.1 messaging.
 *
 * OpenAPI spec version: 1.4.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// ReportingGetLogBody
    /// </summary>
    [DataContract]
        public partial class ReportingGetLogBody :  IEquatable<ReportingGetLogBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportingGetLogBody" /> class.
        /// </summary>
        /// <param name="customData">customData.</param>
        /// <param name="log">log (required).</param>
        /// <param name="logType">logType (required).</param>
        /// <param name="requestId">The Id of this request   (required).</param>
        /// <param name="retries">This specifies how many times the Charging Station must try to upload the log before giving up. If this field is not present, it is left to Charging Station to decide how many times it wants to retry.  .</param>
        /// <param name="retryInterval">The interval in seconds after which a retry may be attempted. If this field is not present, it is left to Charging Station to decide how long to wait between attempts.  .</param>
        public ReportingGetLogBody(CustomDataType customData = default(CustomDataType), LogParametersType log = default(LogParametersType), LogEnumType logType = default(LogEnumType), int? requestId = default(int?), int? retries = default(int?), int? retryInterval = default(int?))
        {
            // to ensure "log" is required (not null)
            if (log == null)
            {
                throw new InvalidDataException("log is a required property for ReportingGetLogBody and cannot be null");
            }
            else
            {
                this.Log = log;
            }
            // to ensure "logType" is required (not null)
            if (logType == null)
            {
                throw new InvalidDataException("logType is a required property for ReportingGetLogBody and cannot be null");
            }
            else
            {
                this.LogType = logType;
            }
            // to ensure "requestId" is required (not null)
            if (requestId == null)
            {
                throw new InvalidDataException("requestId is a required property for ReportingGetLogBody and cannot be null");
            }
            else
            {
                this.RequestId = requestId;
            }
            this.CustomData = customData;
            this.Retries = retries;
            this.RetryInterval = retryInterval;
        }
        
        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public CustomDataType CustomData { get; set; }

        /// <summary>
        /// Gets or Sets Log
        /// </summary>
        [DataMember(Name="log", EmitDefaultValue=false)]
        public LogParametersType Log { get; set; }

        /// <summary>
        /// Gets or Sets LogType
        /// </summary>
        [DataMember(Name="logType", EmitDefaultValue=false)]
        public LogEnumType LogType { get; set; }

        /// <summary>
        /// The Id of this request  
        /// </summary>
        /// <value>The Id of this request  </value>
        [DataMember(Name="requestId", EmitDefaultValue=false)]
        public int? RequestId { get; set; }

        /// <summary>
        /// This specifies how many times the Charging Station must try to upload the log before giving up. If this field is not present, it is left to Charging Station to decide how many times it wants to retry.  
        /// </summary>
        /// <value>This specifies how many times the Charging Station must try to upload the log before giving up. If this field is not present, it is left to Charging Station to decide how many times it wants to retry.  </value>
        [DataMember(Name="retries", EmitDefaultValue=false)]
        public int? Retries { get; set; }

        /// <summary>
        /// The interval in seconds after which a retry may be attempted. If this field is not present, it is left to Charging Station to decide how long to wait between attempts.  
        /// </summary>
        /// <value>The interval in seconds after which a retry may be attempted. If this field is not present, it is left to Charging Station to decide how long to wait between attempts.  </value>
        [DataMember(Name="retryInterval", EmitDefaultValue=false)]
        public int? RetryInterval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportingGetLogBody {\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("  Log: ").Append(Log).Append("\n");
            sb.Append("  LogType: ").Append(LogType).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  Retries: ").Append(Retries).Append("\n");
            sb.Append("  RetryInterval: ").Append(RetryInterval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReportingGetLogBody);
        }

        /// <summary>
        /// Returns true if ReportingGetLogBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ReportingGetLogBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportingGetLogBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomData == input.CustomData ||
                    (this.CustomData != null &&
                    this.CustomData.Equals(input.CustomData))
                ) && 
                (
                    this.Log == input.Log ||
                    (this.Log != null &&
                    this.Log.Equals(input.Log))
                ) && 
                (
                    this.LogType == input.LogType ||
                    (this.LogType != null &&
                    this.LogType.Equals(input.LogType))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.Retries == input.Retries ||
                    (this.Retries != null &&
                    this.Retries.Equals(input.Retries))
                ) && 
                (
                    this.RetryInterval == input.RetryInterval ||
                    (this.RetryInterval != null &&
                    this.RetryInterval.Equals(input.RetryInterval))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomData != null)
                    hashCode = hashCode * 59 + this.CustomData.GetHashCode();
                if (this.Log != null)
                    hashCode = hashCode * 59 + this.Log.GetHashCode();
                if (this.LogType != null)
                    hashCode = hashCode * 59 + this.LogType.GetHashCode();
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.Retries != null)
                    hashCode = hashCode * 59 + this.Retries.GetHashCode();
                if (this.RetryInterval != null)
                    hashCode = hashCode * 59 + this.RetryInterval.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

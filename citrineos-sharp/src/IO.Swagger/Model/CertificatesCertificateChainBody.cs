/* 
 * CitrineOS Central System API
 *
 * Central System API for OCPP 2.0.1 messaging.
 *
 * OpenAPI spec version: 1.4.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// CertificatesCertificateChainBody
    /// </summary>
    [DataContract]
        public partial class CertificatesCertificateChainBody :  IEquatable<CertificatesCertificateChainBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificatesCertificateChainBody" /> class.
        /// </summary>
        /// <param name="keyLength">keyLength.</param>
        /// <param name="organizationName">organizationName (required).</param>
        /// <param name="commonName">commonName (required).</param>
        /// <param name="validBefore">validBefore.</param>
        /// <param name="filePath">filePath.</param>
        /// <param name="selfSigned">selfSigned (required).</param>
        /// <param name="countryName">countryName.</param>
        /// <param name="signatureAlgorithm">signatureAlgorithm.</param>
        /// <param name="pathLen">pathLen.</param>
        public CertificatesCertificateChainBody(decimal? keyLength = default(decimal?), string organizationName = default(string), string commonName = default(string), string validBefore = default(string), string filePath = default(string), bool? selfSigned = default(bool?), string countryName = default(string), string signatureAlgorithm = default(string), decimal? pathLen = default(decimal?))
        {
            // to ensure "organizationName" is required (not null)
            if (organizationName == null)
            {
                throw new InvalidDataException("organizationName is a required property for CertificatesCertificateChainBody and cannot be null");
            }
            else
            {
                this.OrganizationName = organizationName;
            }
            // to ensure "commonName" is required (not null)
            if (commonName == null)
            {
                throw new InvalidDataException("commonName is a required property for CertificatesCertificateChainBody and cannot be null");
            }
            else
            {
                this.CommonName = commonName;
            }
            // to ensure "selfSigned" is required (not null)
            if (selfSigned == null)
            {
                throw new InvalidDataException("selfSigned is a required property for CertificatesCertificateChainBody and cannot be null");
            }
            else
            {
                this.SelfSigned = selfSigned;
            }
            this.KeyLength = keyLength;
            this.ValidBefore = validBefore;
            this.FilePath = filePath;
            this.CountryName = countryName;
            this.SignatureAlgorithm = signatureAlgorithm;
            this.PathLen = pathLen;
        }
        
        /// <summary>
        /// Gets or Sets KeyLength
        /// </summary>
        [DataMember(Name="keyLength", EmitDefaultValue=false)]
        public decimal? KeyLength { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationName
        /// </summary>
        [DataMember(Name="organizationName", EmitDefaultValue=false)]
        public string OrganizationName { get; set; }

        /// <summary>
        /// Gets or Sets CommonName
        /// </summary>
        [DataMember(Name="commonName", EmitDefaultValue=false)]
        public string CommonName { get; set; }

        /// <summary>
        /// Gets or Sets ValidBefore
        /// </summary>
        [DataMember(Name="validBefore", EmitDefaultValue=false)]
        public string ValidBefore { get; set; }

        /// <summary>
        /// Gets or Sets FilePath
        /// </summary>
        [DataMember(Name="filePath", EmitDefaultValue=false)]
        public string FilePath { get; set; }

        /// <summary>
        /// Gets or Sets SelfSigned
        /// </summary>
        [DataMember(Name="selfSigned", EmitDefaultValue=false)]
        public bool? SelfSigned { get; set; }

        /// <summary>
        /// Gets or Sets CountryName
        /// </summary>
        [DataMember(Name="countryName", EmitDefaultValue=false)]
        public string CountryName { get; set; }

        /// <summary>
        /// Gets or Sets SignatureAlgorithm
        /// </summary>
        [DataMember(Name="signatureAlgorithm", EmitDefaultValue=false)]
        public string SignatureAlgorithm { get; set; }

        /// <summary>
        /// Gets or Sets PathLen
        /// </summary>
        [DataMember(Name="pathLen", EmitDefaultValue=false)]
        public decimal? PathLen { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CertificatesCertificateChainBody {\n");
            sb.Append("  KeyLength: ").Append(KeyLength).Append("\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  CommonName: ").Append(CommonName).Append("\n");
            sb.Append("  ValidBefore: ").Append(ValidBefore).Append("\n");
            sb.Append("  FilePath: ").Append(FilePath).Append("\n");
            sb.Append("  SelfSigned: ").Append(SelfSigned).Append("\n");
            sb.Append("  CountryName: ").Append(CountryName).Append("\n");
            sb.Append("  SignatureAlgorithm: ").Append(SignatureAlgorithm).Append("\n");
            sb.Append("  PathLen: ").Append(PathLen).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificatesCertificateChainBody);
        }

        /// <summary>
        /// Returns true if CertificatesCertificateChainBody instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificatesCertificateChainBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificatesCertificateChainBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KeyLength == input.KeyLength ||
                    (this.KeyLength != null &&
                    this.KeyLength.Equals(input.KeyLength))
                ) && 
                (
                    this.OrganizationName == input.OrganizationName ||
                    (this.OrganizationName != null &&
                    this.OrganizationName.Equals(input.OrganizationName))
                ) && 
                (
                    this.CommonName == input.CommonName ||
                    (this.CommonName != null &&
                    this.CommonName.Equals(input.CommonName))
                ) && 
                (
                    this.ValidBefore == input.ValidBefore ||
                    (this.ValidBefore != null &&
                    this.ValidBefore.Equals(input.ValidBefore))
                ) && 
                (
                    this.FilePath == input.FilePath ||
                    (this.FilePath != null &&
                    this.FilePath.Equals(input.FilePath))
                ) && 
                (
                    this.SelfSigned == input.SelfSigned ||
                    (this.SelfSigned != null &&
                    this.SelfSigned.Equals(input.SelfSigned))
                ) && 
                (
                    this.CountryName == input.CountryName ||
                    (this.CountryName != null &&
                    this.CountryName.Equals(input.CountryName))
                ) && 
                (
                    this.SignatureAlgorithm == input.SignatureAlgorithm ||
                    (this.SignatureAlgorithm != null &&
                    this.SignatureAlgorithm.Equals(input.SignatureAlgorithm))
                ) && 
                (
                    this.PathLen == input.PathLen ||
                    (this.PathLen != null &&
                    this.PathLen.Equals(input.PathLen))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KeyLength != null)
                    hashCode = hashCode * 59 + this.KeyLength.GetHashCode();
                if (this.OrganizationName != null)
                    hashCode = hashCode * 59 + this.OrganizationName.GetHashCode();
                if (this.CommonName != null)
                    hashCode = hashCode * 59 + this.CommonName.GetHashCode();
                if (this.ValidBefore != null)
                    hashCode = hashCode * 59 + this.ValidBefore.GetHashCode();
                if (this.FilePath != null)
                    hashCode = hashCode * 59 + this.FilePath.GetHashCode();
                if (this.SelfSigned != null)
                    hashCode = hashCode * 59 + this.SelfSigned.GetHashCode();
                if (this.CountryName != null)
                    hashCode = hashCode * 59 + this.CountryName.GetHashCode();
                if (this.SignatureAlgorithm != null)
                    hashCode = hashCode * 59 + this.SignatureAlgorithm.GetHashCode();
                if (this.PathLen != null)
                    hashCode = hashCode * 59 + this.PathLen.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

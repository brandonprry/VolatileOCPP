/* 
 * CitrineOS Central System API
 *
 * Central System API for OCPP 2.0.1 messaging.
 *
 * OpenAPI spec version: 1.4.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// CertificatesInstallCertificateBody
    /// </summary>
    [DataContract]
        public partial class CertificatesInstallCertificateBody :  IEquatable<CertificatesInstallCertificateBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificatesInstallCertificateBody" /> class.
        /// </summary>
        /// <param name="customData">customData.</param>
        /// <param name="certificateType">certificateType (required).</param>
        /// <param name="certificate">A PEM encoded X.509 certificate.   (required).</param>
        public CertificatesInstallCertificateBody(CustomDataType customData = default(CustomDataType), InstallCertificateUseEnumType certificateType = default(InstallCertificateUseEnumType), string certificate = default(string))
        {
            // to ensure "certificateType" is required (not null)
            if (certificateType == null)
            {
                throw new InvalidDataException("certificateType is a required property for CertificatesInstallCertificateBody and cannot be null");
            }
            else
            {
                this.CertificateType = certificateType;
            }
            // to ensure "certificate" is required (not null)
            if (certificate == null)
            {
                throw new InvalidDataException("certificate is a required property for CertificatesInstallCertificateBody and cannot be null");
            }
            else
            {
                this.Certificate = certificate;
            }
            this.CustomData = customData;
        }
        
        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public CustomDataType CustomData { get; set; }

        /// <summary>
        /// Gets or Sets CertificateType
        /// </summary>
        [DataMember(Name="certificateType", EmitDefaultValue=false)]
        public InstallCertificateUseEnumType CertificateType { get; set; }

        /// <summary>
        /// A PEM encoded X.509 certificate.  
        /// </summary>
        /// <value>A PEM encoded X.509 certificate.  </value>
        [DataMember(Name="certificate", EmitDefaultValue=false)]
        public string Certificate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CertificatesInstallCertificateBody {\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("  CertificateType: ").Append(CertificateType).Append("\n");
            sb.Append("  Certificate: ").Append(Certificate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificatesInstallCertificateBody);
        }

        /// <summary>
        /// Returns true if CertificatesInstallCertificateBody instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificatesInstallCertificateBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificatesInstallCertificateBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomData == input.CustomData ||
                    (this.CustomData != null &&
                    this.CustomData.Equals(input.CustomData))
                ) && 
                (
                    this.CertificateType == input.CertificateType ||
                    (this.CertificateType != null &&
                    this.CertificateType.Equals(input.CertificateType))
                ) && 
                (
                    this.Certificate == input.Certificate ||
                    (this.Certificate != null &&
                    this.Certificate.Equals(input.Certificate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomData != null)
                    hashCode = hashCode * 59 + this.CustomData.GetHashCode();
                if (this.CertificateType != null)
                    hashCode = hashCode * 59 + this.CertificateType.GetHashCode();
                if (this.Certificate != null)
                    hashCode = hashCode * 59 + this.Certificate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

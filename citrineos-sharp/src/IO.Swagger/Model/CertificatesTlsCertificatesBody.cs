/* 
 * CitrineOS Central System API
 *
 * Central System API for OCPP 2.0.1 messaging.
 *
 * OpenAPI spec version: 1.4.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ocpp.citrineos.Client.SwaggerDateConverter;
namespace ocpp.citrineos.Model
{
    /// <summary>
    /// CertificatesTlsCertificatesBody
    /// </summary>
    [DataContract]
        public partial class CertificatesTlsCertificatesBody :  IEquatable<CertificatesTlsCertificatesBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CertificatesTlsCertificatesBody" /> class.
        /// </summary>
        /// <param name="certificateChain">certificateChain (required).</param>
        /// <param name="privateKey">privateKey (required).</param>
        /// <param name="rootCA">rootCA.</param>
        /// <param name="subCAKey">subCAKey.</param>
        public CertificatesTlsCertificatesBody(IList certificateChain = default(IList), string privateKey = default(string), string rootCA = default(string), string subCAKey = default(string))
        {
            // to ensure "certificateChain" is required (not null)
            if (certificateChain == null)
            {
                throw new InvalidDataException("certificateChain is a required property for CertificatesTlsCertificatesBody and cannot be null");
            }
            else
            {
                this.CertificateChain = certificateChain;
            }
            // to ensure "privateKey" is required (not null)
            if (privateKey == null)
            {
                throw new InvalidDataException("privateKey is a required property for CertificatesTlsCertificatesBody and cannot be null");
            }
            else
            {
                this.PrivateKey = privateKey;
            }
            this.RootCA = rootCA;
            this.SubCAKey = subCAKey;
        }
        
        /// <summary>
        /// Gets or Sets CertificateChain
        /// </summary>
        [DataMember(Name="certificateChain", EmitDefaultValue=false)]
        public IList CertificateChain { get; set; }

        /// <summary>
        /// Gets or Sets PrivateKey
        /// </summary>
        [DataMember(Name="privateKey", EmitDefaultValue=false)]
        public string PrivateKey { get; set; }

        /// <summary>
        /// Gets or Sets RootCA
        /// </summary>
        [DataMember(Name="rootCA", EmitDefaultValue=false)]
        public string RootCA { get; set; }

        /// <summary>
        /// Gets or Sets SubCAKey
        /// </summary>
        [DataMember(Name="subCAKey", EmitDefaultValue=false)]
        public string SubCAKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CertificatesTlsCertificatesBody {\n");
            sb.Append("  CertificateChain: ").Append(CertificateChain).Append("\n");
            sb.Append("  PrivateKey: ").Append(PrivateKey).Append("\n");
            sb.Append("  RootCA: ").Append(RootCA).Append("\n");
            sb.Append("  SubCAKey: ").Append(SubCAKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CertificatesTlsCertificatesBody);
        }

        /// <summary>
        /// Returns true if CertificatesTlsCertificatesBody instances are equal
        /// </summary>
        /// <param name="input">Instance of CertificatesTlsCertificatesBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CertificatesTlsCertificatesBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CertificateChain == input.CertificateChain ||
                    (this.CertificateChain != null &&
                    this.CertificateChain.Equals(input.CertificateChain))
                ) && 
                (
                    this.PrivateKey == input.PrivateKey ||
                    (this.PrivateKey != null &&
                    this.PrivateKey.Equals(input.PrivateKey))
                ) && 
                (
                    this.RootCA == input.RootCA ||
                    (this.RootCA != null &&
                    this.RootCA.Equals(input.RootCA))
                ) && 
                (
                    this.SubCAKey == input.SubCAKey ||
                    (this.SubCAKey != null &&
                    this.SubCAKey.Equals(input.SubCAKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CertificateChain != null)
                    hashCode = hashCode * 59 + this.CertificateChain.GetHashCode();
                if (this.PrivateKey != null)
                    hashCode = hashCode * 59 + this.PrivateKey.GetHashCode();
                if (this.RootCA != null)
                    hashCode = hashCode * 59 + this.RootCA.GetHashCode();
                if (this.SubCAKey != null)
                    hashCode = hashCode * 59 + this.SubCAKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

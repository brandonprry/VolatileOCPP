/* 
 * CitrineOS Central System API
 *
 * Central System API for OCPP 2.0.1 messaging.
 *
 * OpenAPI spec version: 1.4.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = ocpp.citrineos.Client.SwaggerDateConverter;
namespace ocpp.citrineos.Model
{
    /// <summary>
    /// Boot configuration used to determine boot process for a charging station
    /// </summary>
    [DataContract]
        public partial class ConfigurationBootBody :  IEquatable<ConfigurationBootBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigurationBootBody" /> class.
        /// </summary>
        /// <param name="heartbeatInterval">heartbeatInterval.</param>
        /// <param name="bootRetryInterval">bootRetryInterval.</param>
        /// <param name="status">status (required).</param>
        /// <param name="statusInfo">statusInfo.</param>
        /// <param name="getBaseReportOnPending">getBaseReportOnPending.</param>
        /// <param name="setVariableIds">setVariableIds.</param>
        /// <param name="bootWithRejectedVariables">bootWithRejectedVariables.</param>
        public ConfigurationBootBody(int? heartbeatInterval = default(int?), int? bootRetryInterval = default(int?), RegistrationStatusEnumType status = default(RegistrationStatusEnumType), StatusInfoType statusInfo = default(StatusInfoType), bool? getBaseReportOnPending = default(bool?), List<int?> setVariableIds = default(List<int?>), bool? bootWithRejectedVariables = default(bool?))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for ConfigurationBootBody and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.HeartbeatInterval = heartbeatInterval;
            this.BootRetryInterval = bootRetryInterval;
            this.StatusInfo = statusInfo;
            this.GetBaseReportOnPending = getBaseReportOnPending;
            this.SetVariableIds = setVariableIds;
            this.BootWithRejectedVariables = bootWithRejectedVariables;
        }
        
        /// <summary>
        /// Gets or Sets HeartbeatInterval
        /// </summary>
        [DataMember(Name="heartbeatInterval", EmitDefaultValue=false)]
        public int? HeartbeatInterval { get; set; }

        /// <summary>
        /// Gets or Sets BootRetryInterval
        /// </summary>
        [DataMember(Name="bootRetryInterval", EmitDefaultValue=false)]
        public int? BootRetryInterval { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public RegistrationStatusEnumType Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusInfo
        /// </summary>
        [DataMember(Name="statusInfo", EmitDefaultValue=false)]
        public StatusInfoType StatusInfo { get; set; }

        /// <summary>
        /// Gets or Sets GetBaseReportOnPending
        /// </summary>
        [DataMember(Name="getBaseReportOnPending", EmitDefaultValue=false)]
        public bool? GetBaseReportOnPending { get; set; }

        /// <summary>
        /// Gets or Sets SetVariableIds
        /// </summary>
        [DataMember(Name="setVariableIds", EmitDefaultValue=false)]
        public List<int?> SetVariableIds { get; set; }

        /// <summary>
        /// Gets or Sets BootWithRejectedVariables
        /// </summary>
        [DataMember(Name="bootWithRejectedVariables", EmitDefaultValue=false)]
        public bool? BootWithRejectedVariables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfigurationBootBody {\n");
            sb.Append("  HeartbeatInterval: ").Append(HeartbeatInterval).Append("\n");
            sb.Append("  BootRetryInterval: ").Append(BootRetryInterval).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusInfo: ").Append(StatusInfo).Append("\n");
            sb.Append("  GetBaseReportOnPending: ").Append(GetBaseReportOnPending).Append("\n");
            sb.Append("  SetVariableIds: ").Append(SetVariableIds).Append("\n");
            sb.Append("  BootWithRejectedVariables: ").Append(BootWithRejectedVariables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConfigurationBootBody);
        }

        /// <summary>
        /// Returns true if ConfigurationBootBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ConfigurationBootBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigurationBootBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HeartbeatInterval == input.HeartbeatInterval ||
                    (this.HeartbeatInterval != null &&
                    this.HeartbeatInterval.Equals(input.HeartbeatInterval))
                ) && 
                (
                    this.BootRetryInterval == input.BootRetryInterval ||
                    (this.BootRetryInterval != null &&
                    this.BootRetryInterval.Equals(input.BootRetryInterval))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusInfo == input.StatusInfo ||
                    (this.StatusInfo != null &&
                    this.StatusInfo.Equals(input.StatusInfo))
                ) && 
                (
                    this.GetBaseReportOnPending == input.GetBaseReportOnPending ||
                    (this.GetBaseReportOnPending != null &&
                    this.GetBaseReportOnPending.Equals(input.GetBaseReportOnPending))
                ) && 
                (
                    this.SetVariableIds == input.SetVariableIds ||
                    this.SetVariableIds != null &&
                    input.SetVariableIds != null &&
                    this.SetVariableIds.SequenceEqual(input.SetVariableIds)
                ) && 
                (
                    this.BootWithRejectedVariables == input.BootWithRejectedVariables ||
                    (this.BootWithRejectedVariables != null &&
                    this.BootWithRejectedVariables.Equals(input.BootWithRejectedVariables))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HeartbeatInterval != null)
                    hashCode = hashCode * 59 + this.HeartbeatInterval.GetHashCode();
                if (this.BootRetryInterval != null)
                    hashCode = hashCode * 59 + this.BootRetryInterval.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusInfo != null)
                    hashCode = hashCode * 59 + this.StatusInfo.GetHashCode();
                if (this.GetBaseReportOnPending != null)
                    hashCode = hashCode * 59 + this.GetBaseReportOnPending.GetHashCode();
                if (this.SetVariableIds != null)
                    hashCode = hashCode * 59 + this.SetVariableIds.GetHashCode();
                if (this.BootWithRejectedVariables != null)
                    hashCode = hashCode * 59 + this.BootWithRejectedVariables.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

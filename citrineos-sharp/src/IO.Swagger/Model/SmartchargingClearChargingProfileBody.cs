/* 
 * CitrineOS Central System API
 *
 * Central System API for OCPP 2.0.1 messaging.
 *
 * OpenAPI spec version: 1.4.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;
namespace IO.Swagger.Model
{
    /// <summary>
    /// SmartchargingClearChargingProfileBody
    /// </summary>
    [DataContract]
        public partial class SmartchargingClearChargingProfileBody :  IEquatable<SmartchargingClearChargingProfileBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SmartchargingClearChargingProfileBody" /> class.
        /// </summary>
        /// <param name="customData">customData.</param>
        /// <param name="chargingProfileId">The Id of the charging profile to clear.  .</param>
        /// <param name="chargingProfileCriteria">chargingProfileCriteria.</param>
        public SmartchargingClearChargingProfileBody(CustomDataType customData = default(CustomDataType), int? chargingProfileId = default(int?), ClearChargingProfileType chargingProfileCriteria = default(ClearChargingProfileType))
        {
            this.CustomData = customData;
            this.ChargingProfileId = chargingProfileId;
            this.ChargingProfileCriteria = chargingProfileCriteria;
        }
        
        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public CustomDataType CustomData { get; set; }

        /// <summary>
        /// The Id of the charging profile to clear.  
        /// </summary>
        /// <value>The Id of the charging profile to clear.  </value>
        [DataMember(Name="chargingProfileId", EmitDefaultValue=false)]
        public int? ChargingProfileId { get; set; }

        /// <summary>
        /// Gets or Sets ChargingProfileCriteria
        /// </summary>
        [DataMember(Name="chargingProfileCriteria", EmitDefaultValue=false)]
        public ClearChargingProfileType ChargingProfileCriteria { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmartchargingClearChargingProfileBody {\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("  ChargingProfileId: ").Append(ChargingProfileId).Append("\n");
            sb.Append("  ChargingProfileCriteria: ").Append(ChargingProfileCriteria).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SmartchargingClearChargingProfileBody);
        }

        /// <summary>
        /// Returns true if SmartchargingClearChargingProfileBody instances are equal
        /// </summary>
        /// <param name="input">Instance of SmartchargingClearChargingProfileBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmartchargingClearChargingProfileBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomData == input.CustomData ||
                    (this.CustomData != null &&
                    this.CustomData.Equals(input.CustomData))
                ) && 
                (
                    this.ChargingProfileId == input.ChargingProfileId ||
                    (this.ChargingProfileId != null &&
                    this.ChargingProfileId.Equals(input.ChargingProfileId))
                ) && 
                (
                    this.ChargingProfileCriteria == input.ChargingProfileCriteria ||
                    (this.ChargingProfileCriteria != null &&
                    this.ChargingProfileCriteria.Equals(input.ChargingProfileCriteria))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomData != null)
                    hashCode = hashCode * 59 + this.CustomData.GetHashCode();
                if (this.ChargingProfileId != null)
                    hashCode = hashCode * 59 + this.ChargingProfileId.GetHashCode();
                if (this.ChargingProfileCriteria != null)
                    hashCode = hashCode * 59 + this.ChargingProfileCriteria.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}

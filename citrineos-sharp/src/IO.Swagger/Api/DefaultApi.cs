/* 
 * CitrineOS Central System API
 *
 * Central System API for OCPP 2.0.1 messaging.
 *
 * OpenAPI spec version: 1.4.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using ocpp.citrineos.Client;
using ocpp.citrineos.Model;

namespace ocpp.citrineos.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void DataCertificatesCertificateChainPost (CertificatesCertificateChainBody body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataCertificatesCertificateChainPostWithHttpInfo (CertificatesCertificateChainBody body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void DataCertificatesRootCertificatePut (CertificatesRootCertificateBody body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataCertificatesRootCertificatePutWithHttpInfo (CertificatesRootCertificateBody body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        void DataCertificatesTlsCertificatesPut (CertificatesTlsCertificatesBody body, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataCertificatesTlsCertificatesPutWithHttpInfo (CertificatesTlsCertificatesBody body, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns></returns>
        void DataConfigurationBootDelete (string stationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataConfigurationBootDeleteWithHttpInfo (string stationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns></returns>
        void DataConfigurationBootGet (string stationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataConfigurationBootGetWithHttpInfo (string stationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Boot configuration used to determine boot process for a charging station</param>
        /// <param name="stationId"></param>
        /// <returns></returns>
        void DataConfigurationBootPut (ConfigurationBootBody body, string stationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Boot configuration used to determine boot process for a charging station</param>
        /// <param name="stationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataConfigurationBootPutWithHttpInfo (ConfigurationBootBody body, string stationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <returns></returns>
        void DataConfigurationPasswordPost (ConfigurationPasswordBody body, string callbackUrl = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataConfigurationPasswordPostWithHttpInfo (ConfigurationPasswordBody body, string callbackUrl = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        void DataEvdriverAuthorizationDelete (string idToken, string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataEvdriverAuthorizationDeleteWithHttpInfo (string idToken, string type);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        void DataEvdriverAuthorizationGet (string idToken, string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataEvdriverAuthorizationGetWithHttpInfo (string idToken, string type);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        void DataEvdriverAuthorizationPut (EvdriverAuthorizationBody body, string idToken, string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataEvdriverAuthorizationPutWithHttpInfo (EvdriverAuthorizationBody body, string idToken, string type);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void DataEvdriverAuthorizationRestrictionsPut (string idToken, string type, EvdriverAuthorizationRestrictionsBody body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataEvdriverAuthorizationRestrictionsPutWithHttpInfo (string idToken, string type, EvdriverAuthorizationRestrictionsBody body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns></returns>
        void DataEvdriverLocalListVersionGet (string stationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataEvdriverLocalListVersionGetWithHttpInfo (string stationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="value"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="componentEvseId"> (optional)</param>
        /// <param name="componentEvseConnectorId"> (optional)</param>
        /// <param name="componentName"> (optional)</param>
        /// <param name="componentInstance"> (optional)</param>
        /// <param name="variableName"> (optional)</param>
        /// <param name="variableInstance"> (optional)</param>
        /// <returns></returns>
        void DataMonitoringVariableAttributeDelete (string stationId, string type = null, string value = null, string status = null, decimal? componentEvseId = null, decimal? componentEvseConnectorId = null, string componentName = null, string componentInstance = null, string variableName = null, string variableInstance = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="value"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="componentEvseId"> (optional)</param>
        /// <param name="componentEvseConnectorId"> (optional)</param>
        /// <param name="componentName"> (optional)</param>
        /// <param name="componentInstance"> (optional)</param>
        /// <param name="variableName"> (optional)</param>
        /// <param name="variableInstance"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataMonitoringVariableAttributeDeleteWithHttpInfo (string stationId, string type = null, string value = null, string status = null, decimal? componentEvseId = null, decimal? componentEvseConnectorId = null, string componentName = null, string componentInstance = null, string variableName = null, string variableInstance = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="value"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="componentEvseId"> (optional)</param>
        /// <param name="componentEvseConnectorId"> (optional)</param>
        /// <param name="componentName"> (optional)</param>
        /// <param name="componentInstance"> (optional)</param>
        /// <param name="variableName"> (optional)</param>
        /// <param name="variableInstance"> (optional)</param>
        /// <returns></returns>
        void DataMonitoringVariableAttributeGet (string stationId, string type = null, string value = null, string status = null, decimal? componentEvseId = null, decimal? componentEvseConnectorId = null, string componentName = null, string componentInstance = null, string variableName = null, string variableInstance = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="value"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="componentEvseId"> (optional)</param>
        /// <param name="componentEvseConnectorId"> (optional)</param>
        /// <param name="componentName"> (optional)</param>
        /// <param name="componentInstance"> (optional)</param>
        /// <param name="variableName"> (optional)</param>
        /// <param name="variableInstance"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataMonitoringVariableAttributeGetWithHttpInfo (string stationId, string type = null, string value = null, string status = null, decimal? componentEvseId = null, decimal? componentEvseConnectorId = null, string componentName = null, string componentInstance = null, string variableName = null, string variableInstance = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="stationId"></param>
        /// <param name="setOnCharger"> (optional)</param>
        /// <returns></returns>
        void DataMonitoringVariableAttributePut (MonitoringVariableAttributeBody body, string stationId, bool? setOnCharger = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="stationId"></param>
        /// <param name="setOnCharger"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataMonitoringVariableAttributePutWithHttpInfo (MonitoringVariableAttributeBody body, string stationId, bool? setOnCharger = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DataOcpprouterSubscriptionDelete (decimal? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataOcpprouterSubscriptionDeleteWithHttpInfo (decimal? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns></returns>
        void DataOcpprouterSubscriptionGet (string stationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataOcpprouterSubscriptionGetWithHttpInfo (string stationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void DataOcpprouterSubscriptionPost (OcpprouterSubscriptionBody body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataOcpprouterSubscriptionPostWithHttpInfo (OcpprouterSubscriptionBody body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns></returns>
        void DataTransactionsTariffDelete (string id = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataTransactionsTariffDeleteWithHttpInfo (string id = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns></returns>
        void DataTransactionsTariffGet (string id = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataTransactionsTariffGetWithHttpInfo (string id = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void DataTransactionsTariffPut (TransactionsTariffBody body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataTransactionsTariffPutWithHttpInfo (TransactionsTariffBody body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="transactionId"></param>
        /// <returns></returns>
        void DataTransactionsTransactionGet (string stationId, string transactionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataTransactionsTransactionGetWithHttpInfo (string stationId, string transactionId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataCertificatesCertificateChainPostAsync (CertificatesCertificateChainBody body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataCertificatesCertificateChainPostAsyncWithHttpInfo (CertificatesCertificateChainBody body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataCertificatesRootCertificatePutAsync (CertificatesRootCertificateBody body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataCertificatesRootCertificatePutAsyncWithHttpInfo (CertificatesRootCertificateBody body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataCertificatesTlsCertificatesPutAsync (CertificatesTlsCertificatesBody body, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataCertificatesTlsCertificatesPutAsyncWithHttpInfo (CertificatesTlsCertificatesBody body, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataConfigurationBootDeleteAsync (string stationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataConfigurationBootDeleteAsyncWithHttpInfo (string stationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataConfigurationBootGetAsync (string stationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataConfigurationBootGetAsyncWithHttpInfo (string stationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Boot configuration used to determine boot process for a charging station</param>
        /// <param name="stationId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataConfigurationBootPutAsync (ConfigurationBootBody body, string stationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Boot configuration used to determine boot process for a charging station</param>
        /// <param name="stationId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataConfigurationBootPutAsyncWithHttpInfo (ConfigurationBootBody body, string stationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataConfigurationPasswordPostAsync (ConfigurationPasswordBody body, string callbackUrl = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataConfigurationPasswordPostAsyncWithHttpInfo (ConfigurationPasswordBody body, string callbackUrl = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataEvdriverAuthorizationDeleteAsync (string idToken, string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataEvdriverAuthorizationDeleteAsyncWithHttpInfo (string idToken, string type);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataEvdriverAuthorizationGetAsync (string idToken, string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataEvdriverAuthorizationGetAsyncWithHttpInfo (string idToken, string type);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataEvdriverAuthorizationPutAsync (EvdriverAuthorizationBody body, string idToken, string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataEvdriverAuthorizationPutAsyncWithHttpInfo (EvdriverAuthorizationBody body, string idToken, string type);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataEvdriverAuthorizationRestrictionsPutAsync (string idToken, string type, EvdriverAuthorizationRestrictionsBody body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataEvdriverAuthorizationRestrictionsPutAsyncWithHttpInfo (string idToken, string type, EvdriverAuthorizationRestrictionsBody body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataEvdriverLocalListVersionGetAsync (string stationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataEvdriverLocalListVersionGetAsyncWithHttpInfo (string stationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="value"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="componentEvseId"> (optional)</param>
        /// <param name="componentEvseConnectorId"> (optional)</param>
        /// <param name="componentName"> (optional)</param>
        /// <param name="componentInstance"> (optional)</param>
        /// <param name="variableName"> (optional)</param>
        /// <param name="variableInstance"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataMonitoringVariableAttributeDeleteAsync (string stationId, string type = null, string value = null, string status = null, decimal? componentEvseId = null, decimal? componentEvseConnectorId = null, string componentName = null, string componentInstance = null, string variableName = null, string variableInstance = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="value"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="componentEvseId"> (optional)</param>
        /// <param name="componentEvseConnectorId"> (optional)</param>
        /// <param name="componentName"> (optional)</param>
        /// <param name="componentInstance"> (optional)</param>
        /// <param name="variableName"> (optional)</param>
        /// <param name="variableInstance"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataMonitoringVariableAttributeDeleteAsyncWithHttpInfo (string stationId, string type = null, string value = null, string status = null, decimal? componentEvseId = null, decimal? componentEvseConnectorId = null, string componentName = null, string componentInstance = null, string variableName = null, string variableInstance = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="value"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="componentEvseId"> (optional)</param>
        /// <param name="componentEvseConnectorId"> (optional)</param>
        /// <param name="componentName"> (optional)</param>
        /// <param name="componentInstance"> (optional)</param>
        /// <param name="variableName"> (optional)</param>
        /// <param name="variableInstance"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataMonitoringVariableAttributeGetAsync (string stationId, string type = null, string value = null, string status = null, decimal? componentEvseId = null, decimal? componentEvseConnectorId = null, string componentName = null, string componentInstance = null, string variableName = null, string variableInstance = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="value"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="componentEvseId"> (optional)</param>
        /// <param name="componentEvseConnectorId"> (optional)</param>
        /// <param name="componentName"> (optional)</param>
        /// <param name="componentInstance"> (optional)</param>
        /// <param name="variableName"> (optional)</param>
        /// <param name="variableInstance"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataMonitoringVariableAttributeGetAsyncWithHttpInfo (string stationId, string type = null, string value = null, string status = null, decimal? componentEvseId = null, decimal? componentEvseConnectorId = null, string componentName = null, string componentInstance = null, string variableName = null, string variableInstance = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="stationId"></param>
        /// <param name="setOnCharger"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataMonitoringVariableAttributePutAsync (MonitoringVariableAttributeBody body, string stationId, bool? setOnCharger = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="stationId"></param>
        /// <param name="setOnCharger"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataMonitoringVariableAttributePutAsyncWithHttpInfo (MonitoringVariableAttributeBody body, string stationId, bool? setOnCharger = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataOcpprouterSubscriptionDeleteAsync (decimal? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataOcpprouterSubscriptionDeleteAsyncWithHttpInfo (decimal? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataOcpprouterSubscriptionGetAsync (string stationId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataOcpprouterSubscriptionGetAsyncWithHttpInfo (string stationId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataOcpprouterSubscriptionPostAsync (OcpprouterSubscriptionBody body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataOcpprouterSubscriptionPostAsyncWithHttpInfo (OcpprouterSubscriptionBody body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataTransactionsTariffDeleteAsync (string id = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataTransactionsTariffDeleteAsyncWithHttpInfo (string id = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataTransactionsTariffGetAsync (string id = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataTransactionsTariffGetAsyncWithHttpInfo (string id = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataTransactionsTariffPutAsync (TransactionsTariffBody body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataTransactionsTariffPutAsyncWithHttpInfo (TransactionsTariffBody body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataTransactionsTransactionGetAsync (string stationId, string transactionId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataTransactionsTransactionGetAsyncWithHttpInfo (string stationId, string transactionId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private ocpp.citrineos.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new ocpp.citrineos.Client.Configuration { BasePath = basePath };

            ExceptionFactory = ocpp.citrineos.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = ocpp.citrineos.Client.Configuration.Default;

            ExceptionFactory = ocpp.citrineos.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(ocpp.citrineos.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = ocpp.citrineos.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = ocpp.citrineos.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ocpp.citrineos.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ocpp.citrineos.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void DataCertificatesCertificateChainPost (CertificatesCertificateChainBody body)
        {
             DataCertificatesCertificateChainPostWithHttpInfo(body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataCertificatesCertificateChainPostWithHttpInfo (CertificatesCertificateChainBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DataCertificatesCertificateChainPost");

            var localVarPath = "/data/certificates/certificateChain";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataCertificatesCertificateChainPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataCertificatesCertificateChainPostAsync (CertificatesCertificateChainBody body)
        {
             await DataCertificatesCertificateChainPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataCertificatesCertificateChainPostAsyncWithHttpInfo (CertificatesCertificateChainBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DataCertificatesCertificateChainPost");

            var localVarPath = "/data/certificates/certificateChain";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataCertificatesCertificateChainPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void DataCertificatesRootCertificatePut (CertificatesRootCertificateBody body)
        {
             DataCertificatesRootCertificatePutWithHttpInfo(body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataCertificatesRootCertificatePutWithHttpInfo (CertificatesRootCertificateBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DataCertificatesRootCertificatePut");

            var localVarPath = "/data/certificates/rootCertificate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataCertificatesRootCertificatePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataCertificatesRootCertificatePutAsync (CertificatesRootCertificateBody body)
        {
             await DataCertificatesRootCertificatePutAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataCertificatesRootCertificatePutAsyncWithHttpInfo (CertificatesRootCertificateBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DataCertificatesRootCertificatePut");

            var localVarPath = "/data/certificates/rootCertificate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataCertificatesRootCertificatePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DataCertificatesTlsCertificatesPut (CertificatesTlsCertificatesBody body, string id)
        {
             DataCertificatesTlsCertificatesPutWithHttpInfo(body, id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataCertificatesTlsCertificatesPutWithHttpInfo (CertificatesTlsCertificatesBody body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DataCertificatesTlsCertificatesPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DataCertificatesTlsCertificatesPut");

            var localVarPath = "/data/certificates/tlsCertificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataCertificatesTlsCertificatesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataCertificatesTlsCertificatesPutAsync (CertificatesTlsCertificatesBody body, string id)
        {
             await DataCertificatesTlsCertificatesPutAsyncWithHttpInfo(body, id);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataCertificatesTlsCertificatesPutAsyncWithHttpInfo (CertificatesTlsCertificatesBody body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DataCertificatesTlsCertificatesPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DataCertificatesTlsCertificatesPut");

            var localVarPath = "/data/certificates/tlsCertificates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataCertificatesTlsCertificatesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns></returns>
        public void DataConfigurationBootDelete (string stationId)
        {
             DataConfigurationBootDeleteWithHttpInfo(stationId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataConfigurationBootDeleteWithHttpInfo (string stationId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->DataConfigurationBootDelete");

            var localVarPath = "/data/configuration/boot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stationId", stationId)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataConfigurationBootDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataConfigurationBootDeleteAsync (string stationId)
        {
             await DataConfigurationBootDeleteAsyncWithHttpInfo(stationId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataConfigurationBootDeleteAsyncWithHttpInfo (string stationId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->DataConfigurationBootDelete");

            var localVarPath = "/data/configuration/boot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stationId", stationId)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataConfigurationBootDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns></returns>
        public void DataConfigurationBootGet (string stationId)
        {
             DataConfigurationBootGetWithHttpInfo(stationId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataConfigurationBootGetWithHttpInfo (string stationId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->DataConfigurationBootGet");

            var localVarPath = "/data/configuration/boot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stationId", stationId)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataConfigurationBootGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataConfigurationBootGetAsync (string stationId)
        {
             await DataConfigurationBootGetAsyncWithHttpInfo(stationId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataConfigurationBootGetAsyncWithHttpInfo (string stationId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->DataConfigurationBootGet");

            var localVarPath = "/data/configuration/boot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stationId", stationId)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataConfigurationBootGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Boot configuration used to determine boot process for a charging station</param>
        /// <param name="stationId"></param>
        /// <returns></returns>
        public void DataConfigurationBootPut (ConfigurationBootBody body, string stationId)
        {
             DataConfigurationBootPutWithHttpInfo(body, stationId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Boot configuration used to determine boot process for a charging station</param>
        /// <param name="stationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataConfigurationBootPutWithHttpInfo (ConfigurationBootBody body, string stationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DataConfigurationBootPut");
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->DataConfigurationBootPut");

            var localVarPath = "/data/configuration/boot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stationId", stationId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataConfigurationBootPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Boot configuration used to determine boot process for a charging station</param>
        /// <param name="stationId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataConfigurationBootPutAsync (ConfigurationBootBody body, string stationId)
        {
             await DataConfigurationBootPutAsyncWithHttpInfo(body, stationId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Boot configuration used to determine boot process for a charging station</param>
        /// <param name="stationId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataConfigurationBootPutAsyncWithHttpInfo (ConfigurationBootBody body, string stationId)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DataConfigurationBootPut");
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->DataConfigurationBootPut");

            var localVarPath = "/data/configuration/boot";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stationId", stationId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataConfigurationBootPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <returns></returns>
        public void DataConfigurationPasswordPost (ConfigurationPasswordBody body, string callbackUrl = null)
        {
             DataConfigurationPasswordPostWithHttpInfo(body, callbackUrl);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataConfigurationPasswordPostWithHttpInfo (ConfigurationPasswordBody body, string callbackUrl = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DataConfigurationPasswordPost");

            var localVarPath = "/data/configuration/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callbackUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "callbackUrl", callbackUrl)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataConfigurationPasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataConfigurationPasswordPostAsync (ConfigurationPasswordBody body, string callbackUrl = null)
        {
             await DataConfigurationPasswordPostAsyncWithHttpInfo(body, callbackUrl);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="callbackUrl"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataConfigurationPasswordPostAsyncWithHttpInfo (ConfigurationPasswordBody body, string callbackUrl = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DataConfigurationPasswordPost");

            var localVarPath = "/data/configuration/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (callbackUrl != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "callbackUrl", callbackUrl)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataConfigurationPasswordPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        public void DataEvdriverAuthorizationDelete (string idToken, string type)
        {
             DataEvdriverAuthorizationDeleteWithHttpInfo(idToken, type);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataEvdriverAuthorizationDeleteWithHttpInfo (string idToken, string type)
        {
            // verify the required parameter 'idToken' is set
            if (idToken == null)
                throw new ApiException(400, "Missing required parameter 'idToken' when calling DefaultApi->DataEvdriverAuthorizationDelete");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->DataEvdriverAuthorizationDelete");

            var localVarPath = "/data/evdriver/authorization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idToken", idToken)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataEvdriverAuthorizationDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataEvdriverAuthorizationDeleteAsync (string idToken, string type)
        {
             await DataEvdriverAuthorizationDeleteAsyncWithHttpInfo(idToken, type);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataEvdriverAuthorizationDeleteAsyncWithHttpInfo (string idToken, string type)
        {
            // verify the required parameter 'idToken' is set
            if (idToken == null)
                throw new ApiException(400, "Missing required parameter 'idToken' when calling DefaultApi->DataEvdriverAuthorizationDelete");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->DataEvdriverAuthorizationDelete");

            var localVarPath = "/data/evdriver/authorization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idToken", idToken)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataEvdriverAuthorizationDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        public void DataEvdriverAuthorizationGet (string idToken, string type)
        {
             DataEvdriverAuthorizationGetWithHttpInfo(idToken, type);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataEvdriverAuthorizationGetWithHttpInfo (string idToken, string type)
        {
            // verify the required parameter 'idToken' is set
            if (idToken == null)
                throw new ApiException(400, "Missing required parameter 'idToken' when calling DefaultApi->DataEvdriverAuthorizationGet");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->DataEvdriverAuthorizationGet");

            var localVarPath = "/data/evdriver/authorization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idToken", idToken)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataEvdriverAuthorizationGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataEvdriverAuthorizationGetAsync (string idToken, string type)
        {
             await DataEvdriverAuthorizationGetAsyncWithHttpInfo(idToken, type);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataEvdriverAuthorizationGetAsyncWithHttpInfo (string idToken, string type)
        {
            // verify the required parameter 'idToken' is set
            if (idToken == null)
                throw new ApiException(400, "Missing required parameter 'idToken' when calling DefaultApi->DataEvdriverAuthorizationGet");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->DataEvdriverAuthorizationGet");

            var localVarPath = "/data/evdriver/authorization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idToken", idToken)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataEvdriverAuthorizationGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns></returns>
        public void DataEvdriverAuthorizationPut (EvdriverAuthorizationBody body, string idToken, string type)
        {
             DataEvdriverAuthorizationPutWithHttpInfo(body, idToken, type);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataEvdriverAuthorizationPutWithHttpInfo (EvdriverAuthorizationBody body, string idToken, string type)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DataEvdriverAuthorizationPut");
            // verify the required parameter 'idToken' is set
            if (idToken == null)
                throw new ApiException(400, "Missing required parameter 'idToken' when calling DefaultApi->DataEvdriverAuthorizationPut");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->DataEvdriverAuthorizationPut");

            var localVarPath = "/data/evdriver/authorization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idToken", idToken)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataEvdriverAuthorizationPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataEvdriverAuthorizationPutAsync (EvdriverAuthorizationBody body, string idToken, string type)
        {
             await DataEvdriverAuthorizationPutAsyncWithHttpInfo(body, idToken, type);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataEvdriverAuthorizationPutAsyncWithHttpInfo (EvdriverAuthorizationBody body, string idToken, string type)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DataEvdriverAuthorizationPut");
            // verify the required parameter 'idToken' is set
            if (idToken == null)
                throw new ApiException(400, "Missing required parameter 'idToken' when calling DefaultApi->DataEvdriverAuthorizationPut");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->DataEvdriverAuthorizationPut");

            var localVarPath = "/data/evdriver/authorization";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idToken", idToken)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataEvdriverAuthorizationPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void DataEvdriverAuthorizationRestrictionsPut (string idToken, string type, EvdriverAuthorizationRestrictionsBody body = null)
        {
             DataEvdriverAuthorizationRestrictionsPutWithHttpInfo(idToken, type, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataEvdriverAuthorizationRestrictionsPutWithHttpInfo (string idToken, string type, EvdriverAuthorizationRestrictionsBody body = null)
        {
            // verify the required parameter 'idToken' is set
            if (idToken == null)
                throw new ApiException(400, "Missing required parameter 'idToken' when calling DefaultApi->DataEvdriverAuthorizationRestrictionsPut");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->DataEvdriverAuthorizationRestrictionsPut");

            var localVarPath = "/data/evdriver/authorizationRestrictions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idToken", idToken)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataEvdriverAuthorizationRestrictionsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataEvdriverAuthorizationRestrictionsPutAsync (string idToken, string type, EvdriverAuthorizationRestrictionsBody body = null)
        {
             await DataEvdriverAuthorizationRestrictionsPutAsyncWithHttpInfo(idToken, type, body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idToken"></param>
        /// <param name="type"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataEvdriverAuthorizationRestrictionsPutAsyncWithHttpInfo (string idToken, string type, EvdriverAuthorizationRestrictionsBody body = null)
        {
            // verify the required parameter 'idToken' is set
            if (idToken == null)
                throw new ApiException(400, "Missing required parameter 'idToken' when calling DefaultApi->DataEvdriverAuthorizationRestrictionsPut");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->DataEvdriverAuthorizationRestrictionsPut");

            var localVarPath = "/data/evdriver/authorizationRestrictions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idToken != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idToken", idToken)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataEvdriverAuthorizationRestrictionsPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns></returns>
        public void DataEvdriverLocalListVersionGet (string stationId)
        {
             DataEvdriverLocalListVersionGetWithHttpInfo(stationId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataEvdriverLocalListVersionGetWithHttpInfo (string stationId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->DataEvdriverLocalListVersionGet");

            var localVarPath = "/data/evdriver/localListVersion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stationId", stationId)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataEvdriverLocalListVersionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataEvdriverLocalListVersionGetAsync (string stationId)
        {
             await DataEvdriverLocalListVersionGetAsyncWithHttpInfo(stationId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataEvdriverLocalListVersionGetAsyncWithHttpInfo (string stationId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->DataEvdriverLocalListVersionGet");

            var localVarPath = "/data/evdriver/localListVersion";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stationId", stationId)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataEvdriverLocalListVersionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="value"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="componentEvseId"> (optional)</param>
        /// <param name="componentEvseConnectorId"> (optional)</param>
        /// <param name="componentName"> (optional)</param>
        /// <param name="componentInstance"> (optional)</param>
        /// <param name="variableName"> (optional)</param>
        /// <param name="variableInstance"> (optional)</param>
        /// <returns></returns>
        public void DataMonitoringVariableAttributeDelete (string stationId, string type = null, string value = null, string status = null, decimal? componentEvseId = null, decimal? componentEvseConnectorId = null, string componentName = null, string componentInstance = null, string variableName = null, string variableInstance = null)
        {
             DataMonitoringVariableAttributeDeleteWithHttpInfo(stationId, type, value, status, componentEvseId, componentEvseConnectorId, componentName, componentInstance, variableName, variableInstance);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="value"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="componentEvseId"> (optional)</param>
        /// <param name="componentEvseConnectorId"> (optional)</param>
        /// <param name="componentName"> (optional)</param>
        /// <param name="componentInstance"> (optional)</param>
        /// <param name="variableName"> (optional)</param>
        /// <param name="variableInstance"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataMonitoringVariableAttributeDeleteWithHttpInfo (string stationId, string type = null, string value = null, string status = null, decimal? componentEvseId = null, decimal? componentEvseConnectorId = null, string componentName = null, string componentInstance = null, string variableName = null, string variableInstance = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->DataMonitoringVariableAttributeDelete");

            var localVarPath = "/data/monitoring/variableAttribute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stationId", stationId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (componentEvseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "component_evse_id", componentEvseId)); // query parameter
            if (componentEvseConnectorId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "component_evse_connectorId", componentEvseConnectorId)); // query parameter
            if (componentName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "component_name", componentName)); // query parameter
            if (componentInstance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "component_instance", componentInstance)); // query parameter
            if (variableName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "variable_name", variableName)); // query parameter
            if (variableInstance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "variable_instance", variableInstance)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataMonitoringVariableAttributeDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="value"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="componentEvseId"> (optional)</param>
        /// <param name="componentEvseConnectorId"> (optional)</param>
        /// <param name="componentName"> (optional)</param>
        /// <param name="componentInstance"> (optional)</param>
        /// <param name="variableName"> (optional)</param>
        /// <param name="variableInstance"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataMonitoringVariableAttributeDeleteAsync (string stationId, string type = null, string value = null, string status = null, decimal? componentEvseId = null, decimal? componentEvseConnectorId = null, string componentName = null, string componentInstance = null, string variableName = null, string variableInstance = null)
        {
             await DataMonitoringVariableAttributeDeleteAsyncWithHttpInfo(stationId, type, value, status, componentEvseId, componentEvseConnectorId, componentName, componentInstance, variableName, variableInstance);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="value"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="componentEvseId"> (optional)</param>
        /// <param name="componentEvseConnectorId"> (optional)</param>
        /// <param name="componentName"> (optional)</param>
        /// <param name="componentInstance"> (optional)</param>
        /// <param name="variableName"> (optional)</param>
        /// <param name="variableInstance"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataMonitoringVariableAttributeDeleteAsyncWithHttpInfo (string stationId, string type = null, string value = null, string status = null, decimal? componentEvseId = null, decimal? componentEvseConnectorId = null, string componentName = null, string componentInstance = null, string variableName = null, string variableInstance = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->DataMonitoringVariableAttributeDelete");

            var localVarPath = "/data/monitoring/variableAttribute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stationId", stationId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (componentEvseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "component_evse_id", componentEvseId)); // query parameter
            if (componentEvseConnectorId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "component_evse_connectorId", componentEvseConnectorId)); // query parameter
            if (componentName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "component_name", componentName)); // query parameter
            if (componentInstance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "component_instance", componentInstance)); // query parameter
            if (variableName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "variable_name", variableName)); // query parameter
            if (variableInstance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "variable_instance", variableInstance)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataMonitoringVariableAttributeDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="value"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="componentEvseId"> (optional)</param>
        /// <param name="componentEvseConnectorId"> (optional)</param>
        /// <param name="componentName"> (optional)</param>
        /// <param name="componentInstance"> (optional)</param>
        /// <param name="variableName"> (optional)</param>
        /// <param name="variableInstance"> (optional)</param>
        /// <returns></returns>
        public void DataMonitoringVariableAttributeGet (string stationId, string type = null, string value = null, string status = null, decimal? componentEvseId = null, decimal? componentEvseConnectorId = null, string componentName = null, string componentInstance = null, string variableName = null, string variableInstance = null)
        {
             DataMonitoringVariableAttributeGetWithHttpInfo(stationId, type, value, status, componentEvseId, componentEvseConnectorId, componentName, componentInstance, variableName, variableInstance);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="value"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="componentEvseId"> (optional)</param>
        /// <param name="componentEvseConnectorId"> (optional)</param>
        /// <param name="componentName"> (optional)</param>
        /// <param name="componentInstance"> (optional)</param>
        /// <param name="variableName"> (optional)</param>
        /// <param name="variableInstance"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataMonitoringVariableAttributeGetWithHttpInfo (string stationId, string type = null, string value = null, string status = null, decimal? componentEvseId = null, decimal? componentEvseConnectorId = null, string componentName = null, string componentInstance = null, string variableName = null, string variableInstance = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->DataMonitoringVariableAttributeGet");

            var localVarPath = "/data/monitoring/variableAttribute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stationId", stationId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (componentEvseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "component_evse_id", componentEvseId)); // query parameter
            if (componentEvseConnectorId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "component_evse_connectorId", componentEvseConnectorId)); // query parameter
            if (componentName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "component_name", componentName)); // query parameter
            if (componentInstance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "component_instance", componentInstance)); // query parameter
            if (variableName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "variable_name", variableName)); // query parameter
            if (variableInstance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "variable_instance", variableInstance)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataMonitoringVariableAttributeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="value"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="componentEvseId"> (optional)</param>
        /// <param name="componentEvseConnectorId"> (optional)</param>
        /// <param name="componentName"> (optional)</param>
        /// <param name="componentInstance"> (optional)</param>
        /// <param name="variableName"> (optional)</param>
        /// <param name="variableInstance"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataMonitoringVariableAttributeGetAsync (string stationId, string type = null, string value = null, string status = null, decimal? componentEvseId = null, decimal? componentEvseConnectorId = null, string componentName = null, string componentInstance = null, string variableName = null, string variableInstance = null)
        {
             await DataMonitoringVariableAttributeGetAsyncWithHttpInfo(stationId, type, value, status, componentEvseId, componentEvseConnectorId, componentName, componentInstance, variableName, variableInstance);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="type"> (optional)</param>
        /// <param name="value"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="componentEvseId"> (optional)</param>
        /// <param name="componentEvseConnectorId"> (optional)</param>
        /// <param name="componentName"> (optional)</param>
        /// <param name="componentInstance"> (optional)</param>
        /// <param name="variableName"> (optional)</param>
        /// <param name="variableInstance"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataMonitoringVariableAttributeGetAsyncWithHttpInfo (string stationId, string type = null, string value = null, string status = null, decimal? componentEvseId = null, decimal? componentEvseConnectorId = null, string componentName = null, string componentInstance = null, string variableName = null, string variableInstance = null)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->DataMonitoringVariableAttributeGet");

            var localVarPath = "/data/monitoring/variableAttribute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stationId", stationId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (componentEvseId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "component_evse_id", componentEvseId)); // query parameter
            if (componentEvseConnectorId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "component_evse_connectorId", componentEvseConnectorId)); // query parameter
            if (componentName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "component_name", componentName)); // query parameter
            if (componentInstance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "component_instance", componentInstance)); // query parameter
            if (variableName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "variable_name", variableName)); // query parameter
            if (variableInstance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "variable_instance", variableInstance)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataMonitoringVariableAttributeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="stationId"></param>
        /// <param name="setOnCharger"> (optional)</param>
        /// <returns></returns>
        public void DataMonitoringVariableAttributePut (MonitoringVariableAttributeBody body, string stationId, bool? setOnCharger = null)
        {
             DataMonitoringVariableAttributePutWithHttpInfo(body, stationId, setOnCharger);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="stationId"></param>
        /// <param name="setOnCharger"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataMonitoringVariableAttributePutWithHttpInfo (MonitoringVariableAttributeBody body, string stationId, bool? setOnCharger = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DataMonitoringVariableAttributePut");
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->DataMonitoringVariableAttributePut");

            var localVarPath = "/data/monitoring/variableAttribute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stationId", stationId)); // query parameter
            if (setOnCharger != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "setOnCharger", setOnCharger)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataMonitoringVariableAttributePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="stationId"></param>
        /// <param name="setOnCharger"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataMonitoringVariableAttributePutAsync (MonitoringVariableAttributeBody body, string stationId, bool? setOnCharger = null)
        {
             await DataMonitoringVariableAttributePutAsyncWithHttpInfo(body, stationId, setOnCharger);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="stationId"></param>
        /// <param name="setOnCharger"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataMonitoringVariableAttributePutAsyncWithHttpInfo (MonitoringVariableAttributeBody body, string stationId, bool? setOnCharger = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DataMonitoringVariableAttributePut");
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->DataMonitoringVariableAttributePut");

            var localVarPath = "/data/monitoring/variableAttribute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stationId", stationId)); // query parameter
            if (setOnCharger != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "setOnCharger", setOnCharger)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataMonitoringVariableAttributePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DataOcpprouterSubscriptionDelete (decimal? id)
        {
             DataOcpprouterSubscriptionDeleteWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataOcpprouterSubscriptionDeleteWithHttpInfo (decimal? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DataOcpprouterSubscriptionDelete");

            var localVarPath = "/data/ocpprouter/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataOcpprouterSubscriptionDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataOcpprouterSubscriptionDeleteAsync (decimal? id)
        {
             await DataOcpprouterSubscriptionDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataOcpprouterSubscriptionDeleteAsyncWithHttpInfo (decimal? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DataOcpprouterSubscriptionDelete");

            var localVarPath = "/data/ocpprouter/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataOcpprouterSubscriptionDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns></returns>
        public void DataOcpprouterSubscriptionGet (string stationId)
        {
             DataOcpprouterSubscriptionGetWithHttpInfo(stationId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataOcpprouterSubscriptionGetWithHttpInfo (string stationId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->DataOcpprouterSubscriptionGet");

            var localVarPath = "/data/ocpprouter/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stationId", stationId)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataOcpprouterSubscriptionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataOcpprouterSubscriptionGetAsync (string stationId)
        {
             await DataOcpprouterSubscriptionGetAsyncWithHttpInfo(stationId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataOcpprouterSubscriptionGetAsyncWithHttpInfo (string stationId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->DataOcpprouterSubscriptionGet");

            var localVarPath = "/data/ocpprouter/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stationId", stationId)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataOcpprouterSubscriptionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void DataOcpprouterSubscriptionPost (OcpprouterSubscriptionBody body)
        {
             DataOcpprouterSubscriptionPostWithHttpInfo(body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataOcpprouterSubscriptionPostWithHttpInfo (OcpprouterSubscriptionBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DataOcpprouterSubscriptionPost");

            var localVarPath = "/data/ocpprouter/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataOcpprouterSubscriptionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataOcpprouterSubscriptionPostAsync (OcpprouterSubscriptionBody body)
        {
             await DataOcpprouterSubscriptionPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataOcpprouterSubscriptionPostAsyncWithHttpInfo (OcpprouterSubscriptionBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DataOcpprouterSubscriptionPost");

            var localVarPath = "/data/ocpprouter/subscription";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataOcpprouterSubscriptionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns></returns>
        public void DataTransactionsTariffDelete (string id = null)
        {
             DataTransactionsTariffDeleteWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataTransactionsTariffDeleteWithHttpInfo (string id = null)
        {

            var localVarPath = "/data/transactions/tariff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTransactionsTariffDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataTransactionsTariffDeleteAsync (string id = null)
        {
             await DataTransactionsTariffDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataTransactionsTariffDeleteAsyncWithHttpInfo (string id = null)
        {

            var localVarPath = "/data/transactions/tariff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTransactionsTariffDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns></returns>
        public void DataTransactionsTariffGet (string id = null)
        {
             DataTransactionsTariffGetWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataTransactionsTariffGetWithHttpInfo (string id = null)
        {

            var localVarPath = "/data/transactions/tariff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTransactionsTariffGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataTransactionsTariffGetAsync (string id = null)
        {
             await DataTransactionsTariffGetAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataTransactionsTariffGetAsyncWithHttpInfo (string id = null)
        {

            var localVarPath = "/data/transactions/tariff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTransactionsTariffGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void DataTransactionsTariffPut (TransactionsTariffBody body)
        {
             DataTransactionsTariffPutWithHttpInfo(body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataTransactionsTariffPutWithHttpInfo (TransactionsTariffBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DataTransactionsTariffPut");

            var localVarPath = "/data/transactions/tariff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTransactionsTariffPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataTransactionsTariffPutAsync (TransactionsTariffBody body)
        {
             await DataTransactionsTariffPutAsyncWithHttpInfo(body);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataTransactionsTariffPutAsyncWithHttpInfo (TransactionsTariffBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->DataTransactionsTariffPut");

            var localVarPath = "/data/transactions/tariff";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTransactionsTariffPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="transactionId"></param>
        /// <returns></returns>
        public void DataTransactionsTransactionGet (string stationId, string transactionId)
        {
             DataTransactionsTransactionGetWithHttpInfo(stationId, transactionId);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="transactionId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataTransactionsTransactionGetWithHttpInfo (string stationId, string transactionId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->DataTransactionsTransactionGet");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling DefaultApi->DataTransactionsTransactionGet");

            var localVarPath = "/data/transactions/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stationId", stationId)); // query parameter
            if (transactionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transactionId", transactionId)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTransactionsTransactionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataTransactionsTransactionGetAsync (string stationId, string transactionId)
        {
             await DataTransactionsTransactionGetAsyncWithHttpInfo(stationId, transactionId);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ocpp.citrineos.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stationId"></param>
        /// <param name="transactionId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataTransactionsTransactionGetAsyncWithHttpInfo (string stationId, string transactionId)
        {
            // verify the required parameter 'stationId' is set
            if (stationId == null)
                throw new ApiException(400, "Missing required parameter 'stationId' when calling DefaultApi->DataTransactionsTransactionGet");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling DefaultApi->DataTransactionsTransactionGet");

            var localVarPath = "/data/transactions/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stationId", stationId)); // query parameter
            if (transactionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "transactionId", transactionId)); // query parameter

            // make the HTTP request
            RestResponse localVarResponse = (RestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataTransactionsTransactionGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
